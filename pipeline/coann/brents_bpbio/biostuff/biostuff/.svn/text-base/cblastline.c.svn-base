/* Generated by Cython 0.11.2 on Sat Sep 26 20:09:41 2009 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#include "structmember.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#if PY_VERSION_HEX < 0x02040000
  #define METH_COEXIST 0
  #define PyDict_CheckExact(op) (Py_TYPE(op) == &PyDict_Type)
#endif
#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PY_FORMAT_SIZE_T ""
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   PyInt_AsLong(o)
  #define PyNumber_Index(o)    PyNumber_Int(o)
  #define PyIndex_Check(o)     PyNumber_Check(o)
#endif
#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
          PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)

  typedef struct {
       void *buf;
       PyObject *obj;
       Py_ssize_t len;
       Py_ssize_t itemsize;
       int readonly;
       int ndim;
       char *format;
       Py_ssize_t *shape;
       Py_ssize_t *strides;
       Py_ssize_t *suboffsets;
       void *internal;
  } Py_buffer;

  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)

#endif
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#endif
#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyString_Type                PyBytes_Type
  #define PyString_CheckExact          PyBytes_CheckExact
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define PyBytes_Type                 PyString_Type
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) PyInstanceMethod_New(func)
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#else
  #define _USE_MATH_DEFINES
#endif
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
#else
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#endif
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif
#ifdef __cplusplus
#define __PYX_EXTERN_C extern "C"
#else
#define __PYX_EXTERN_C extern
#endif
#include <math.h>
#define __PYX_HAVE_API__biostuff__cblastline
#include "stdlib.h"
#include "stdio.h"
#include "pnew.h"
#define __PYX_USE_C99_COMPLEX defined(_Complex_I)


#ifdef __GNUC__
#define INLINE __inline__
#elif _WIN32
#define INLINE __inline
#else
#define INLINE 
#endif

typedef struct {PyObject **p; char *s; long n; char is_unicode; char intern; char is_identifier;} __Pyx_StringTabEntry; /*proto*/



static int __pyx_skip_dispatch = 0;


/* Type Conversion Predeclarations */

#if PY_MAJOR_VERSION < 3
#define __Pyx_PyBytes_FromString          PyString_FromString
#define __Pyx_PyBytes_FromStringAndSize   PyString_FromStringAndSize
#define __Pyx_PyBytes_AsString            PyString_AsString
#else
#define __Pyx_PyBytes_FromString          PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize   PyBytes_FromStringAndSize
#define __Pyx_PyBytes_AsString            PyBytes_AsString
#endif

#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);

#if !defined(T_PYSSIZET)
#if PY_VERSION_HEX < 0x02050000
#define T_PYSSIZET T_INT
#elif !defined(T_LONGLONG)
#define T_PYSSIZET \
        ((sizeof(Py_ssize_t) == sizeof(int))  ? T_INT  : \
        ((sizeof(Py_ssize_t) == sizeof(long)) ? T_LONG : -1))
#else
#define T_PYSSIZET \
        ((sizeof(Py_ssize_t) == sizeof(int))          ? T_INT      : \
        ((sizeof(Py_ssize_t) == sizeof(long))         ? T_LONG     : \
        ((sizeof(Py_ssize_t) == sizeof(PY_LONG_LONG)) ? T_LONGLONG : -1)))
#endif
#endif

#if !defined(T_SIZET)
#if !defined(T_ULONGLONG)
#define T_SIZET \
        ((sizeof(size_t) == sizeof(unsigned int))  ? T_UINT  : \
        ((sizeof(size_t) == sizeof(unsigned long)) ? T_ULONG : -1))
#else
#define T_SIZET \
        ((sizeof(size_t) == sizeof(unsigned int))          ? T_UINT      : \
        ((sizeof(size_t) == sizeof(unsigned long))         ? T_ULONG     : \
        ((sizeof(size_t) == sizeof(unsigned PY_LONG_LONG)) ? T_ULONGLONG : -1)))
#endif
#endif

static INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static INLINE size_t __Pyx_PyInt_AsSize_t(PyObject*);

#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))


#ifdef __GNUC__
/* Test for GCC > 2.95 */
#if __GNUC__ > 2 ||               (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)) 
#define likely(x)   __builtin_expect(!!(x), 1)
#define unlikely(x) __builtin_expect(!!(x), 0)
#else /* __GNUC__ > 2 ... */
#define likely(x)   (x)
#define unlikely(x) (x)
#endif /* __GNUC__ > 2 ... */
#else /* __GNUC__ */
#define likely(x)   (x)
#define unlikely(x) (x)
#endif /* __GNUC__ */
    
static PyObject *__pyx_m;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;
static const char **__pyx_f;


#ifdef CYTHON_REFNANNY
typedef struct {
  void (*INCREF)(void*, PyObject*, int);
  void (*DECREF)(void*, PyObject*, int);
  void (*GOTREF)(void*, PyObject*, int);
  void (*GIVEREF)(void*, PyObject*, int);
  void* (*NewContext)(const char*, int, const char*);
  void (*FinishContext)(void**);
} __Pyx_RefnannyAPIStruct;
static __Pyx_RefnannyAPIStruct *__Pyx_Refnanny = NULL;
#define __Pyx_ImportRefcountAPI(name)   (__Pyx_RefnannyAPIStruct *) PyCObject_Import((char *)name, (char *)"RefnannyAPI")
#define __Pyx_INCREF(r) __Pyx_Refnanny->INCREF(__pyx_refchk, (PyObject *)(r), __LINE__)
#define __Pyx_DECREF(r) __Pyx_Refnanny->DECREF(__pyx_refchk, (PyObject *)(r), __LINE__)
#define __Pyx_GOTREF(r) __Pyx_Refnanny->GOTREF(__pyx_refchk, (PyObject *)(r), __LINE__)
#define __Pyx_GIVEREF(r) __Pyx_Refnanny->GIVEREF(__pyx_refchk, (PyObject *)(r), __LINE__)
#define __Pyx_XDECREF(r) if((r) == NULL) ; else __Pyx_DECREF(r)
#define __Pyx_SetupRefcountContext(name)   void* __pyx_refchk = __Pyx_Refnanny->NewContext((name), __LINE__, __FILE__)
#define __Pyx_FinishRefcountContext()   __Pyx_Refnanny->FinishContext(&__pyx_refchk)
#else
#define __Pyx_INCREF(r) Py_INCREF(r)
#define __Pyx_DECREF(r) Py_DECREF(r)
#define __Pyx_GOTREF(r)
#define __Pyx_GIVEREF(r)
#define __Pyx_XDECREF(r) Py_XDECREF(r)
#define __Pyx_SetupRefcountContext(name)
#define __Pyx_FinishRefcountContext()
#endif /* CYTHON_REFNANNY */
#define __Pyx_XGIVEREF(r) if((r) == NULL) ; else __Pyx_GIVEREF(r)
#define __Pyx_XGOTREF(r) if((r) == NULL) ; else __Pyx_GOTREF(r)

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name, PyObject* kw_name); /*proto*/

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found); /*proto*/

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],     PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,     const char* function_name); /*proto*/


static INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}


#define __Pyx_GetItemInt_List(o, i, size, to_py_func) ((size <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_List_Fast(o, i, size <= sizeof(long)) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i, int fits_long) {
    if (likely(o != Py_None)) {
        if (likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
            PyObject *r = PyList_GET_ITEM(o, i);
            Py_INCREF(r);
            return r;
        }
        else if ((-PyList_GET_SIZE(o) <= i) & (i < 0)) {
            PyObject *r = PyList_GET_ITEM(o, PyList_GET_SIZE(o) + i);
            Py_INCREF(r);
            return r;
        }
    }
    return __Pyx_GetItemInt_Generic(o, fits_long ? PyInt_FromLong(i) : PyLong_FromLongLong(i));
}

#define __Pyx_GetItemInt_Tuple(o, i, size, to_py_func) ((size <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_Tuple_Fast(o, i, size <= sizeof(long)) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i, int fits_long) {
    if (likely(o != Py_None)) {
        if (likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, i);
            Py_INCREF(r);
            return r;
        }
        else if ((-PyTuple_GET_SIZE(o) <= i) & (i < 0)) {
            PyObject *r = PyTuple_GET_ITEM(o, PyTuple_GET_SIZE(o) + i);
            Py_INCREF(r);
            return r;
        }
    }
    return __Pyx_GetItemInt_Generic(o, fits_long ? PyInt_FromLong(i) : PyLong_FromLongLong(i));
}


#define __Pyx_GetItemInt(o, i, size, to_py_func) ((size <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_Fast(o, i, size <= sizeof(long)) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int fits_long) {
    PyObject *r;
    if (PyList_CheckExact(o) && ((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
    }
    else if (PyTuple_CheckExact(o) && ((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
    }
    else if (Py_TYPE(o)->tp_as_sequence && Py_TYPE(o)->tp_as_sequence->sq_item && (likely(i >= 0))) {
        r = PySequence_GetItem(o, i);
    }
    else {
        r = __Pyx_GetItemInt_Generic(o, fits_long ? PyInt_FromLong(i) : PyLong_FromLongLong(i));
    }
    return r;
}

#define __Pyx_SetItemInt(o, i, v, size, to_py_func) ((size <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_SetItemInt_Fast(o, i, v, size <= sizeof(long)) : \
                                                    __Pyx_SetItemInt_Generic(o, to_py_func(i), v))

static INLINE int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (!j) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}

static INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v, int fits_long) {
    if (PyList_CheckExact(o) && ((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        Py_INCREF(v);
        Py_DECREF(PyList_GET_ITEM(o, i));
        PyList_SET_ITEM(o, i, v);
        return 1;
    }
    else if (Py_TYPE(o)->tp_as_sequence && Py_TYPE(o)->tp_as_sequence->sq_ass_item && (likely(i >= 0)))
        return PySequence_SetItem(o, i, v);
    else {
        PyObject *j = fits_long ? PyInt_FromLong(i) : PyLong_FromLongLong(i);
        return __Pyx_SetItemInt_Generic(o, j, v);
    }
}

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact); /*proto*/

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list); /*proto*/

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name); /*proto*/

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb); /*proto*/

static INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb); /*proto*/
static INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static INLINE int __Pyx_StrEq(const char *, const char *); /*proto*/

static INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject *);

static INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject *);

static INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject *);

static INLINE char __Pyx_PyInt_AsChar(PyObject *);

static INLINE short __Pyx_PyInt_AsShort(PyObject *);

static INLINE int __Pyx_PyInt_AsInt(PyObject *);

static INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject *);

static INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject *);

static INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject *);

static INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject *);

static INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject *);

static INLINE long __Pyx_PyInt_AsLong(PyObject *);

static INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject *);

static INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject *);

static INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject *);

static void __Pyx_AddTraceback(const char *funcname); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/

/* Type declarations */

/* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":61
 * import sys
 * 
 * cdef class BlastLine:             # <<<<<<<<<<<<<<
 *     r"""
 *     given a string of tab-delimited (-m 8) blast output, parse it and create
 */

struct __pyx_obj_8biostuff_10cblastline_BlastLine {
  PyObject_HEAD
  int hitlen;
  int nmismatch;
  int ngaps;
  int qstart;
  int qstop;
  int sstart;
  int sstop;
  float pctid;
  float score;
  double evalue;
  char _cquery[128];
  char _csubject[128];
  PyObject *_pysubject;
  PyObject *_pyquery;
};

/* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":28
 * 
 * 
 * cdef class BlastFile:             # <<<<<<<<<<<<<<
 *     cdef FILE* fh
 *     cdef object filename
 */

struct __pyx_obj_8biostuff_10cblastline_BlastFile {
  PyObject_HEAD
  FILE *fh;
  PyObject *filename;
};
/* Module declarations from stdlib */

/* Module declarations from biostuff.cblastline */

static PyTypeObject *__pyx_ptype_8biostuff_10cblastline_BlastFile = 0;
static PyTypeObject *__pyx_ptype_8biostuff_10cblastline_BlastLine = 0;
static const char* __pyx_v_8biostuff_10cblastline_blast_format;
static const char* __pyx_v_8biostuff_10cblastline_blast_format_line;
static PyObject *__pyx_k_15 = 0;
static struct __pyx_obj_8biostuff_10cblastline_BlastLine *__pyx_f_8biostuff_10cblastline_create_blast_line(char *, char *, float, int, int, int, int, int, int, int, float, float, int __pyx_skip_dispatch); /*proto*/
#define __Pyx_MODULE_NAME "biostuff.cblastline"
int __pyx_module_is_main_biostuff__cblastline = 0;

/* Implementation of biostuff.cblastline */
static char __pyx_k_1[] = "%s\t%s\t%f\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%lf\t%f";
static char __pyx_k_2[] = "%s\t%s\t%f\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%lf\t%f\n";
static PyObject *__pyx_int_2;
static char __pyx_k___main__[] = "__main__";
static PyObject *__pyx_kp___main__;
static char __pyx_k___cinit__[] = "__cinit__";
static PyObject *__pyx_kp___cinit__;
static char __pyx_k___iter__[] = "__iter__";
static PyObject *__pyx_kp___iter__;
static char __pyx_k___next__[] = "__next__";
static PyObject *__pyx_kp___next__;
static char __pyx_k___dealloc__[] = "__dealloc__";
static PyObject *__pyx_kp___dealloc__;
static char __pyx_k___repr__[] = "__repr__";
static PyObject *__pyx_kp___repr__;
static char __pyx_k_attrs[] = "attrs";
static PyObject *__pyx_kp_attrs;
static char __pyx_k___init__[] = "__init__";
static PyObject *__pyx_kp___init__;
static char __pyx_k___richcmp__[] = "__richcmp__";
static PyObject *__pyx_kp___richcmp__;
static char __pyx_k_to_blast_line[] = "to_blast_line";
static PyObject *__pyx_kp_to_blast_line;
static char __pyx_k___reduce__[] = "__reduce__";
static PyObject *__pyx_kp___reduce__;
static char __pyx_k_create_blast_line[] = "create_blast_line";
static PyObject *__pyx_kp_create_blast_line;
static char __pyx_k_filename[] = "filename";
static PyObject *__pyx_kp_filename;
static char __pyx_k_val[] = "val";
static PyObject *__pyx_kp_val;
static char __pyx_k_sline[] = "sline";
static PyObject *__pyx_kp_sline;
static char __pyx_k_self[] = "self";
static PyObject *__pyx_kp_self;
static char __pyx_k_other[] = "other";
static PyObject *__pyx_kp_other;
static char __pyx_k_op[] = "op";
static PyObject *__pyx_kp_op;
static char __pyx_k_as_str[] = "as_str";
static PyObject *__pyx_kp_as_str;
static char __pyx_k_query[] = "query";
static PyObject *__pyx_kp_query;
static char __pyx_k_subject[] = "subject";
static PyObject *__pyx_kp_subject;
static char __pyx_k_pctid[] = "pctid";
static PyObject *__pyx_kp_pctid;
static char __pyx_k_hitlen[] = "hitlen";
static PyObject *__pyx_kp_hitlen;
static char __pyx_k_nmismatch[] = "nmismatch";
static PyObject *__pyx_kp_nmismatch;
static char __pyx_k_ngaps[] = "ngaps";
static PyObject *__pyx_kp_ngaps;
static char __pyx_k_qstart[] = "qstart";
static PyObject *__pyx_kp_qstart;
static char __pyx_k_qstop[] = "qstop";
static PyObject *__pyx_kp_qstop;
static char __pyx_k_sstart[] = "sstart";
static PyObject *__pyx_kp_sstart;
static char __pyx_k_sstop[] = "sstop";
static PyObject *__pyx_kp_sstop;
static char __pyx_k_evalue[] = "evalue";
static PyObject *__pyx_kp_evalue;
static char __pyx_k_score[] = "score";
static PyObject *__pyx_kp_score;
static char __pyx_k_sys[] = "sys";
static PyObject *__pyx_kp_sys;
static char __pyx_k_3[] = "query";
static PyObject *__pyx_kp_3;
static char __pyx_k_4[] = "subject";
static PyObject *__pyx_kp_4;
static char __pyx_k_5[] = "pctid";
static PyObject *__pyx_kp_5;
static char __pyx_k_6[] = "hitlen";
static PyObject *__pyx_kp_6;
static char __pyx_k_7[] = "nmismatch";
static PyObject *__pyx_kp_7;
static char __pyx_k_8[] = "ngaps";
static PyObject *__pyx_kp_8;
static char __pyx_k_9[] = "qstart";
static PyObject *__pyx_kp_9;
static char __pyx_k_10[] = "qstop";
static PyObject *__pyx_kp_10;
static char __pyx_k_11[] = "sstart";
static PyObject *__pyx_kp_11;
static char __pyx_k_12[] = "sstop";
static PyObject *__pyx_kp_12;
static char __pyx_k_13[] = "evalue";
static PyObject *__pyx_kp_13;
static char __pyx_k_14[] = "score";
static PyObject *__pyx_kp_14;
static char __pyx_k_StopIteration[] = "StopIteration";
static PyObject *__pyx_kp_StopIteration;
static char __pyx_k_Exception[] = "Exception";
static PyObject *__pyx_kp_Exception;
static char __pyx_k_join[] = "join";
static PyObject *__pyx_kp_join;
static char __pyx_k_map[] = "map";
static PyObject *__pyx_kp_map;
static PyObject *__pyx_builtin_StopIteration;
static PyObject *__pyx_builtin_Exception;
static PyObject *__pyx_builtin_map;
static char __pyx_k_16[] = "r";
static PyObject *__pyx_kp_17;
static char __pyx_k_17[] = "BlastFile('%s')";
static PyObject *__pyx_kp_18;
static char __pyx_k_18[] = "that comparison not implemented";
static PyObject *__pyx_kp_19;
static PyObject *__pyx_kp_20;
static char __pyx_k_19[] = "BlastLine(%s[%i:%i]-%s[%i:%i], ";
static char __pyx_k_20[] = "ptcid=%.3f, eval=%.3f)";
static PyObject *__pyx_kp_21;
static PyObject *__pyx_kp_22;
static PyObject *__pyx_kp_23;
static char __pyx_k_21[] = "%.2f";
static char __pyx_k_22[] = "%.1f";
static char __pyx_k_23[] = "\t";

/* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":31
 *     cdef FILE* fh
 *     cdef object filename
 *     def __cinit__(self, char* filename):             # <<<<<<<<<<<<<<
 *         self.fh = fopen(filename, 'r')
 *         self.filename = filename
 */

static int __pyx_pf_8biostuff_10cblastline_9BlastFile___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_8biostuff_10cblastline_9BlastFile___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_filename;
  int __pyx_r;
  PyObject *__pyx_t_1 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_kp_filename,0};
  __Pyx_SetupRefcountContext("__cinit__");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[1] = {0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_kp_filename);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_filename = __Pyx_PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_filename) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_filename = __Pyx_PyBytes_AsString(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((!__pyx_v_filename) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("biostuff.cblastline.BlastFile.__cinit__");
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":32
 *     cdef object filename
 *     def __cinit__(self, char* filename):
 *         self.fh = fopen(filename, 'r')             # <<<<<<<<<<<<<<
 *         self.filename = filename
 * 
 */
  ((struct __pyx_obj_8biostuff_10cblastline_BlastFile *)__pyx_v_self)->fh = fopen(__pyx_v_filename, __pyx_k_16);

  /* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":33
 *     def __cinit__(self, char* filename):
 *         self.fh = fopen(filename, 'r')
 *         self.filename = filename             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_filename); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(((struct __pyx_obj_8biostuff_10cblastline_BlastFile *)__pyx_v_self)->filename);
  __Pyx_DECREF(((struct __pyx_obj_8biostuff_10cblastline_BlastFile *)__pyx_v_self)->filename);
  ((struct __pyx_obj_8biostuff_10cblastline_BlastFile *)__pyx_v_self)->filename = __pyx_t_1;
  __pyx_t_1 = 0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("biostuff.cblastline.BlastFile.__cinit__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":35
 *         self.filename = filename
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         rewind(self.fh)
 *         return self
 */

static PyObject *__pyx_pf_8biostuff_10cblastline_9BlastFile___iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_8biostuff_10cblastline_9BlastFile___iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_SetupRefcountContext("__iter__");

  /* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":36
 * 
 *     def __iter__(self):
 *         rewind(self.fh)             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  rewind(((struct __pyx_obj_8biostuff_10cblastline_BlastFile *)__pyx_v_self)->fh);

  /* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":37
 *     def __iter__(self):
 *         rewind(self.fh)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __next__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":39
 *         return self
 * 
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         cdef float pct = 0.0, evalue = 0.0, bit = 0.0
 *         cdef char qname[512], sname[512]
 */

static PyObject *__pyx_pf_8biostuff_10cblastline_9BlastFile___next__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_8biostuff_10cblastline_9BlastFile___next__(PyObject *__pyx_v_self) {
  float __pyx_v_pct;
  float __pyx_v_evalue;
  float __pyx_v_bit;
  char __pyx_v_qname[512];
  char __pyx_v_sname[512];
  int __pyx_v_hlen;
  int __pyx_v_nmiss;
  int __pyx_v_ngap;
  int __pyx_v_qstart;
  int __pyx_v_qstop;
  int __pyx_v_sstart;
  int __pyx_v_sstop;
  int __pyx_v_success;
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_SetupRefcountContext("__next__");

  /* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":40
 * 
 *     def __next__(self):
 *         cdef float pct = 0.0, evalue = 0.0, bit = 0.0             # <<<<<<<<<<<<<<
 *         cdef char qname[512], sname[512]
 *         cdef int hlen, nmiss, ngap, qstart, qstop, sstart, sstop
 */
  __pyx_v_pct = 0.0;
  __pyx_v_evalue = 0.0;
  __pyx_v_bit = 0.0;

  /* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":47
 *         success = fscanf(self.fh, blast_format_line, qname, sname, \
 *                          &pct, &hlen, &nmiss, &ngap, &qstart, &qstop,\
 *                          &sstart, &sstop, &evalue, &bit )             # <<<<<<<<<<<<<<
 *         if success == EOF:
 *             raise StopIteration
 */
  __pyx_v_success = fscanf(((struct __pyx_obj_8biostuff_10cblastline_BlastFile *)__pyx_v_self)->fh, __pyx_v_8biostuff_10cblastline_blast_format_line, __pyx_v_qname, __pyx_v_sname, (&__pyx_v_pct), (&__pyx_v_hlen), (&__pyx_v_nmiss), (&__pyx_v_ngap), (&__pyx_v_qstart), (&__pyx_v_qstop), (&__pyx_v_sstart), (&__pyx_v_sstop), (&__pyx_v_evalue), (&__pyx_v_bit));

  /* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":48
 *                          &pct, &hlen, &nmiss, &ngap, &qstart, &qstop,\
 *                          &sstart, &sstop, &evalue, &bit )
 *         if success == EOF:             # <<<<<<<<<<<<<<
 *             raise StopIteration
 *         return create_blast_line(qname, sname, pct, hlen, nmiss, ngap,
 */
  __pyx_t_1 = (__pyx_v_success == EOF);
  if (__pyx_t_1) {

    /* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":49
 *                          &sstart, &sstop, &evalue, &bit )
 *         if success == EOF:
 *             raise StopIteration             # <<<<<<<<<<<<<<
 *         return create_blast_line(qname, sname, pct, hlen, nmiss, ngap,
 *                         qstart, qstop, sstart, sstop, evalue, bit)
 */
    __Pyx_Raise(__pyx_builtin_StopIteration, 0, 0);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":50
 *         if success == EOF:
 *             raise StopIteration
 *         return create_blast_line(qname, sname, pct, hlen, nmiss, ngap,             # <<<<<<<<<<<<<<
 *                         qstart, qstop, sstart, sstop, evalue, bit)
 * 
 */
  __Pyx_XDECREF(__pyx_r);

  /* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":51
 *             raise StopIteration
 *         return create_blast_line(qname, sname, pct, hlen, nmiss, ngap,
 *                         qstart, qstop, sstart, sstop, evalue, bit)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_t_2 = ((PyObject *)__pyx_f_8biostuff_10cblastline_create_blast_line(__pyx_v_qname, __pyx_v_sname, __pyx_v_pct, __pyx_v_hlen, __pyx_v_nmiss, __pyx_v_ngap, __pyx_v_qstart, __pyx_v_qstop, __pyx_v_sstart, __pyx_v_sstop, __pyx_v_evalue, __pyx_v_bit, 0)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("biostuff.cblastline.BlastFile.__next__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":53
 *                         qstart, qstop, sstart, sstop, evalue, bit)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         fclose(self.fh)
 * 
 */

static void __pyx_pf_8biostuff_10cblastline_9BlastFile___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_8biostuff_10cblastline_9BlastFile___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_SetupRefcountContext("__dealloc__");

  /* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":54
 * 
 *     def __dealloc__(self):
 *         fclose(self.fh)             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  fclose(((struct __pyx_obj_8biostuff_10cblastline_BlastFile *)__pyx_v_self)->fh);

  __Pyx_FinishRefcountContext();
}

/* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":56
 *         fclose(self.fh)
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "BlastFile('%s')" % (self.filename, )
 * 
 */

static PyObject *__pyx_pf_8biostuff_10cblastline_9BlastFile___repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_8biostuff_10cblastline_9BlastFile___repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_SetupRefcountContext("__repr__");

  /* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":57
 * 
 *     def __repr__(self):
 *         return "BlastFile('%s')" % (self.filename, )             # <<<<<<<<<<<<<<
 * 
 * import sys
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(((struct __pyx_obj_8biostuff_10cblastline_BlastFile *)__pyx_v_self)->filename);
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((struct __pyx_obj_8biostuff_10cblastline_BlastFile *)__pyx_v_self)->filename);
  __Pyx_GIVEREF(((struct __pyx_obj_8biostuff_10cblastline_BlastFile *)__pyx_v_self)->filename);
  __pyx_t_2 = PyNumber_Remainder(__pyx_kp_17, ((PyObject *)__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("biostuff.cblastline.BlastFile.__repr__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":86
 * 
 *     property query:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self._pyquery is None:
 *                 return self._cquery
 */

static PyObject *__pyx_pf_8biostuff_10cblastline_9BlastLine_5query___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_8biostuff_10cblastline_9BlastLine_5query___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_SetupRefcountContext("__get__");

  /* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":87
 *     property query:
 *         def __get__(self):
 *             if self._pyquery is None:             # <<<<<<<<<<<<<<
 *                 return self._cquery
 *             return self._pyquery
 */
  __pyx_t_1 = (((struct __pyx_obj_8biostuff_10cblastline_BlastLine *)__pyx_v_self)->_pyquery == Py_None);
  if (__pyx_t_1) {

    /* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":88
 *         def __get__(self):
 *             if self._pyquery is None:
 *                 return self._cquery             # <<<<<<<<<<<<<<
 *             return self._pyquery
 *         def __set__(self, val):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyBytes_FromString(((struct __pyx_obj_8biostuff_10cblastline_BlastLine *)__pyx_v_self)->_cquery); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":89
 *             if self._pyquery is None:
 *                 return self._cquery
 *             return self._pyquery             # <<<<<<<<<<<<<<
 *         def __set__(self, val):
 *             self._pyquery = val
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((struct __pyx_obj_8biostuff_10cblastline_BlastLine *)__pyx_v_self)->_pyquery);
  __pyx_r = ((struct __pyx_obj_8biostuff_10cblastline_BlastLine *)__pyx_v_self)->_pyquery;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("biostuff.cblastline.BlastLine.query.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":90
 *                 return self._cquery
 *             return self._pyquery
 *         def __set__(self, val):             # <<<<<<<<<<<<<<
 *             self._pyquery = val
 * 
 */

static int __pyx_pf_8biostuff_10cblastline_9BlastLine_5query___set__(PyObject *__pyx_v_self, PyObject *__pyx_v_val); /*proto*/
static int __pyx_pf_8biostuff_10cblastline_9BlastLine_5query___set__(PyObject *__pyx_v_self, PyObject *__pyx_v_val) {
  int __pyx_r;
  __Pyx_SetupRefcountContext("__set__");

  /* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":91
 *             return self._pyquery
 *         def __set__(self, val):
 *             self._pyquery = val             # <<<<<<<<<<<<<<
 * 
 *     property subject:
 */
  __Pyx_INCREF(__pyx_v_val);
  __Pyx_GIVEREF(__pyx_v_val);
  __Pyx_GOTREF(((struct __pyx_obj_8biostuff_10cblastline_BlastLine *)__pyx_v_self)->_pyquery);
  __Pyx_DECREF(((struct __pyx_obj_8biostuff_10cblastline_BlastLine *)__pyx_v_self)->_pyquery);
  ((struct __pyx_obj_8biostuff_10cblastline_BlastLine *)__pyx_v_self)->_pyquery = __pyx_v_val;

  __pyx_r = 0;
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":94
 * 
 *     property subject:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self._pysubject is None:
 *                 return self._csubject
 */

static PyObject *__pyx_pf_8biostuff_10cblastline_9BlastLine_7subject___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_8biostuff_10cblastline_9BlastLine_7subject___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_SetupRefcountContext("__get__");

  /* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":95
 *     property subject:
 *         def __get__(self):
 *             if self._pysubject is None:             # <<<<<<<<<<<<<<
 *                 return self._csubject
 *             return self._pysubject
 */
  __pyx_t_1 = (((struct __pyx_obj_8biostuff_10cblastline_BlastLine *)__pyx_v_self)->_pysubject == Py_None);
  if (__pyx_t_1) {

    /* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":96
 *         def __get__(self):
 *             if self._pysubject is None:
 *                 return self._csubject             # <<<<<<<<<<<<<<
 *             return self._pysubject
 *         def __set__(self, val):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyBytes_FromString(((struct __pyx_obj_8biostuff_10cblastline_BlastLine *)__pyx_v_self)->_csubject); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":97
 *             if self._pysubject is None:
 *                 return self._csubject
 *             return self._pysubject             # <<<<<<<<<<<<<<
 *         def __set__(self, val):
 *             self._pysubject = val
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((struct __pyx_obj_8biostuff_10cblastline_BlastLine *)__pyx_v_self)->_pysubject);
  __pyx_r = ((struct __pyx_obj_8biostuff_10cblastline_BlastLine *)__pyx_v_self)->_pysubject;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("biostuff.cblastline.BlastLine.subject.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":98
 *                 return self._csubject
 *             return self._pysubject
 *         def __set__(self, val):             # <<<<<<<<<<<<<<
 *             self._pysubject = val
 * 
 */

static int __pyx_pf_8biostuff_10cblastline_9BlastLine_7subject___set__(PyObject *__pyx_v_self, PyObject *__pyx_v_val); /*proto*/
static int __pyx_pf_8biostuff_10cblastline_9BlastLine_7subject___set__(PyObject *__pyx_v_self, PyObject *__pyx_v_val) {
  int __pyx_r;
  __Pyx_SetupRefcountContext("__set__");

  /* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":99
 *             return self._pysubject
 *         def __set__(self, val):
 *             self._pysubject = val             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, char *sline):
 */
  __Pyx_INCREF(__pyx_v_val);
  __Pyx_GIVEREF(__pyx_v_val);
  __Pyx_GOTREF(((struct __pyx_obj_8biostuff_10cblastline_BlastLine *)__pyx_v_self)->_pysubject);
  __Pyx_DECREF(((struct __pyx_obj_8biostuff_10cblastline_BlastLine *)__pyx_v_self)->_pysubject);
  ((struct __pyx_obj_8biostuff_10cblastline_BlastLine *)__pyx_v_self)->_pysubject = __pyx_v_val;

  __pyx_r = 0;
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":101
 *             self._pysubject = val
 * 
 *     def __init__(self, char *sline):             # <<<<<<<<<<<<<<
 *         if sline != NULL:
 *             sscanf(sline, blast_format, self._cquery, self._csubject,
 */

static int __pyx_pf_8biostuff_10cblastline_9BlastLine___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_8biostuff_10cblastline_9BlastLine___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_sline;
  int __pyx_r;
  int __pyx_t_1;
  static PyObject **__pyx_pyargnames[] = {&__pyx_kp_sline,0};
  __Pyx_SetupRefcountContext("__init__");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[1] = {0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_kp_sline);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_sline = __Pyx_PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_sline) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_sline = __Pyx_PyBytes_AsString(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((!__pyx_v_sline) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("biostuff.cblastline.BlastLine.__init__");
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":102
 * 
 *     def __init__(self, char *sline):
 *         if sline != NULL:             # <<<<<<<<<<<<<<
 *             sscanf(sline, blast_format, self._cquery, self._csubject,
 *                 &self.pctid, &self.hitlen, &self.nmismatch, &self.ngaps,
 */
  __pyx_t_1 = (__pyx_v_sline != NULL);
  if (__pyx_t_1) {

    /* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":107
 *                 &self.qstart, &self.qstop,
 *                 &self.sstart, &self.sstop,
 *                 &self.evalue, &self.score)             # <<<<<<<<<<<<<<
 * 
 *     def __richcmp__(BlastLine self, BlastLine other, size_t op):
 */
    sscanf(__pyx_v_sline, __pyx_v_8biostuff_10cblastline_blast_format, ((struct __pyx_obj_8biostuff_10cblastline_BlastLine *)__pyx_v_self)->_cquery, ((struct __pyx_obj_8biostuff_10cblastline_BlastLine *)__pyx_v_self)->_csubject, (&((struct __pyx_obj_8biostuff_10cblastline_BlastLine *)__pyx_v_self)->pctid), (&((struct __pyx_obj_8biostuff_10cblastline_BlastLine *)__pyx_v_self)->hitlen), (&((struct __pyx_obj_8biostuff_10cblastline_BlastLine *)__pyx_v_self)->nmismatch), (&((struct __pyx_obj_8biostuff_10cblastline_BlastLine *)__pyx_v_self)->ngaps), (&((struct __pyx_obj_8biostuff_10cblastline_BlastLine *)__pyx_v_self)->qstart), (&((struct __pyx_obj_8biostuff_10cblastline_BlastLine *)__pyx_v_self)->qstop), (&((struct __pyx_obj_8biostuff_10cblastline_BlastLine *)__pyx_v_self)->sstart), (&((struct __pyx_obj_8biostuff_10cblastline_BlastLine *)__pyx_v_self)->sstop), (&((struct __pyx_obj_8biostuff_10cblastline_BlastLine *)__pyx_v_self)->evalue), (&((struct __pyx_obj_8biostuff_10cblastline_BlastLine *)__pyx_v_self)->score));
    goto __pyx_L6;
  }
  __pyx_L6:;

  __pyx_r = 0;
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":109
 *                 &self.evalue, &self.score)
 * 
 *     def __richcmp__(BlastLine self, BlastLine other, size_t op):             # <<<<<<<<<<<<<<
 *         if op == 2: # ==
 *             if self.query != other.query and self.qstart != other.qstart:
 */

static PyObject *__pyx_pf_8biostuff_10cblastline_9BlastLine___richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_op); /*proto*/
static PyObject *__pyx_pf_8biostuff_10cblastline_9BlastLine___richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_op) {
  size_t __pyx_v_op;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  __Pyx_SetupRefcountContext("__richcmp__");
  __pyx_v_op = __pyx_arg_op;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_8biostuff_10cblastline_BlastLine, 1, "self", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8biostuff_10cblastline_BlastLine, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":110
 * 
 *     def __richcmp__(BlastLine self, BlastLine other, size_t op):
 *         if op == 2: # ==             # <<<<<<<<<<<<<<
 *             if self.query != other.query and self.qstart != other.qstart:
 *                 return False
 */
  switch (__pyx_v_op) {
    case 2:

    /* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":111
 *     def __richcmp__(BlastLine self, BlastLine other, size_t op):
 *         if op == 2: # ==
 *             if self.query != other.query and self.qstart != other.qstart:             # <<<<<<<<<<<<<<
 *                 return False
 *             return self.subject == other.subject and \
 */
    __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_kp_query); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_GetAttr(__pyx_v_other, __pyx_kp_query); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_NE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_4) {
      __pyx_t_5 = (((struct __pyx_obj_8biostuff_10cblastline_BlastLine *)__pyx_v_self)->qstart != ((struct __pyx_obj_8biostuff_10cblastline_BlastLine *)__pyx_v_other)->qstart);
      __pyx_t_6 = __pyx_t_5;
    } else {
      __pyx_t_6 = __pyx_t_4;
    }
    if (__pyx_t_6) {

      /* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":112
 *         if op == 2: # ==
 *             if self.query != other.query and self.qstart != other.qstart:
 *                 return False             # <<<<<<<<<<<<<<
 *             return self.subject == other.subject and \
 *                     self.qstop == other.qstop and \
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;
      goto __pyx_L5;
    }
    __pyx_L5:;

    /* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":113
 *             if self.query != other.query and self.qstart != other.qstart:
 *                 return False
 *             return self.subject == other.subject and \             # <<<<<<<<<<<<<<
 *                     self.qstop == other.qstop and \
 *                     self.sstop == other.sstop and \
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = PyObject_GetAttr(__pyx_v_self, __pyx_kp_subject); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyObject_GetAttr(__pyx_v_other, __pyx_kp_subject); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_2, Py_EQ); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_6) {
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":114
 *                 return False
 *             return self.subject == other.subject and \
 *                     self.qstop == other.qstop and \             # <<<<<<<<<<<<<<
 *                     self.sstop == other.sstop and \
 *                     self.evalue == other.evalue and \
 */
      if ((((struct __pyx_obj_8biostuff_10cblastline_BlastLine *)__pyx_v_self)->qstop == ((struct __pyx_obj_8biostuff_10cblastline_BlastLine *)__pyx_v_other)->qstop)) {

        /* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":115
 *             return self.subject == other.subject and \
 *                     self.qstop == other.qstop and \
 *                     self.sstop == other.sstop and \             # <<<<<<<<<<<<<<
 *                     self.evalue == other.evalue and \
 *                     self.hitlen == other.hitlen
 */
        if ((((struct __pyx_obj_8biostuff_10cblastline_BlastLine *)__pyx_v_self)->sstop == ((struct __pyx_obj_8biostuff_10cblastline_BlastLine *)__pyx_v_other)->sstop)) {

          /* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":116
 *                     self.qstop == other.qstop and \
 *                     self.sstop == other.sstop and \
 *                     self.evalue == other.evalue and \             # <<<<<<<<<<<<<<
 *                     self.hitlen == other.hitlen
 * 
 */
          if ((((struct __pyx_obj_8biostuff_10cblastline_BlastLine *)__pyx_v_self)->evalue == ((struct __pyx_obj_8biostuff_10cblastline_BlastLine *)__pyx_v_other)->evalue)) {

            /* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":117
 *                     self.sstop == other.sstop and \
 *                     self.evalue == other.evalue and \
 *                     self.hitlen == other.hitlen             # <<<<<<<<<<<<<<
 * 
 *         elif op == 3: # !=
 */
            __pyx_t_6 = (((struct __pyx_obj_8biostuff_10cblastline_BlastLine *)__pyx_v_self)->hitlen == ((struct __pyx_obj_8biostuff_10cblastline_BlastLine *)__pyx_v_other)->hitlen);
          } else {
            __pyx_t_6 = (((struct __pyx_obj_8biostuff_10cblastline_BlastLine *)__pyx_v_self)->evalue == ((struct __pyx_obj_8biostuff_10cblastline_BlastLine *)__pyx_v_other)->evalue);
          }
          __pyx_t_4 = __pyx_t_6;
        } else {
          __pyx_t_4 = (((struct __pyx_obj_8biostuff_10cblastline_BlastLine *)__pyx_v_self)->sstop == ((struct __pyx_obj_8biostuff_10cblastline_BlastLine *)__pyx_v_other)->sstop);
        }
        __pyx_t_6 = __pyx_t_4;
      } else {
        __pyx_t_6 = (((struct __pyx_obj_8biostuff_10cblastline_BlastLine *)__pyx_v_self)->qstop == ((struct __pyx_obj_8biostuff_10cblastline_BlastLine *)__pyx_v_other)->qstop);
      }
      __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __pyx_t_2;
      __pyx_t_2 = 0;
    } else {
      __pyx_t_3 = __pyx_t_1;
      __pyx_t_1 = 0;
    }
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
    break;

    /* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":119
 *                     self.hitlen == other.hitlen
 * 
 *         elif op == 3: # !=             # <<<<<<<<<<<<<<
 *             return not self.__richcmp__(other, 2)
 *         else:
 */
    case 3:

    /* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":120
 * 
 *         elif op == 3: # !=
 *             return not self.__richcmp__(other, 2)             # <<<<<<<<<<<<<<
 *         else:
 *             raise Exception("that comparison not implemented")
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = PyObject_GetAttr(__pyx_v_self, __pyx_kp___richcmp__); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_1));
    __Pyx_INCREF(__pyx_v_other);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_other);
    __Pyx_GIVEREF(__pyx_v_other);
    __Pyx_INCREF(__pyx_int_2);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_2);
    __Pyx_GIVEREF(__pyx_int_2);
    __pyx_t_2 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyBool_FromLong((!__pyx_t_6)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
    break;
    default:

    /* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":122
 *             return not self.__richcmp__(other, 2)
 *         else:
 *             raise Exception("that comparison not implemented")             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_2));
    __Pyx_INCREF(__pyx_kp_18);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_18);
    __Pyx_GIVEREF(__pyx_kp_18);
    __pyx_t_1 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    break;
  }

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("biostuff.cblastline.BlastLine.__richcmp__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":125
 * 
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return ("BlastLine(%s[%i:%i]-%s[%i:%i], " +\
 *                    "ptcid=%.3f, eval=%.3f)") \
 */

static PyObject *__pyx_pf_8biostuff_10cblastline_9BlastLine___repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_8biostuff_10cblastline_9BlastLine___repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  __Pyx_SetupRefcountContext("__repr__");

  /* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":126
 * 
 *     def __repr__(self):
 *         return ("BlastLine(%s[%i:%i]-%s[%i:%i], " +\             # <<<<<<<<<<<<<<
 *                    "ptcid=%.3f, eval=%.3f)") \
 *             % (self.query, self.qstart, self.qstop, self.subject, self.sstart,\
 */
  __Pyx_XDECREF(__pyx_r);

  /* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":127
 *     def __repr__(self):
 *         return ("BlastLine(%s[%i:%i]-%s[%i:%i], " +\
 *                    "ptcid=%.3f, eval=%.3f)") \             # <<<<<<<<<<<<<<
 *             % (self.query, self.qstart, self.qstop, self.subject, self.sstart,\
 *                self.sstop, self.pctid,
 */
  __pyx_t_1 = PyNumber_Add(__pyx_kp_19, __pyx_kp_20); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":128
 *         return ("BlastLine(%s[%i:%i]-%s[%i:%i], " +\
 *                    "ptcid=%.3f, eval=%.3f)") \
 *             % (self.query, self.qstart, self.qstop, self.subject, self.sstart,\             # <<<<<<<<<<<<<<
 *                self.sstop, self.pctid,
 *                self.evalue)
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_kp_query); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyInt_FromLong(((struct __pyx_obj_8biostuff_10cblastline_BlastLine *)__pyx_v_self)->qstart); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyInt_FromLong(((struct __pyx_obj_8biostuff_10cblastline_BlastLine *)__pyx_v_self)->qstop); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyObject_GetAttr(__pyx_v_self, __pyx_kp_subject); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyInt_FromLong(((struct __pyx_obj_8biostuff_10cblastline_BlastLine *)__pyx_v_self)->sstart); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);

  /* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":129
 *                    "ptcid=%.3f, eval=%.3f)") \
 *             % (self.query, self.qstart, self.qstop, self.subject, self.sstart,\
 *                self.sstop, self.pctid,             # <<<<<<<<<<<<<<
 *                self.evalue)
 * 
 */
  __pyx_t_7 = PyInt_FromLong(((struct __pyx_obj_8biostuff_10cblastline_BlastLine *)__pyx_v_self)->sstop); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyFloat_FromDouble(((struct __pyx_obj_8biostuff_10cblastline_BlastLine *)__pyx_v_self)->pctid); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);

  /* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":130
 *             % (self.query, self.qstart, self.qstop, self.subject, self.sstart,\
 *                self.sstop, self.pctid,
 *                self.evalue)             # <<<<<<<<<<<<<<
 * 
 *     """
 */
  __pyx_t_9 = PyFloat_FromDouble(((struct __pyx_obj_8biostuff_10cblastline_BlastLine *)__pyx_v_self)->evalue); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = PyTuple_New(8); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_10));
  PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_10, 3, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_10, 4, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_10, 5, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_10, 6, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_10, 7, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_9 = 0;
  __pyx_t_9 = PyNumber_Remainder(__pyx_t_1, ((PyObject *)__pyx_t_10)); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_10)); __pyx_t_10 = 0;
  __pyx_r = __pyx_t_9;
  __pyx_t_9 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("biostuff.cblastline.BlastLine.__repr__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":144
 *                                     qstart, qstop, sstart, sstop, evalue, bit)
 *     """
 *     def to_blast_line(self, as_str=True):             # <<<<<<<<<<<<<<
 *         if as_str:
 *             s = [getattr(self, attr) for attr in BlastLine.attrs]
 */

static PyObject *__pyx_pf_8biostuff_10cblastline_9BlastLine_to_blast_line(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_8biostuff_10cblastline_9BlastLine_to_blast_line(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_as_str = 0;
  PyObject *__pyx_v_s;
  PyObject *__pyx_v_attr;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_1 = 0;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  static PyObject **__pyx_pyargnames[] = {&__pyx_kp_as_str,0};
  __Pyx_SetupRefcountContext("to_blast_line");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[1] = {0};
    values[0] = __pyx_k_15;
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      if (kw_args > 1) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_kp_as_str);
        if (unlikely(value)) { values[0] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "to_blast_line") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_as_str = values[0];
  } else {
    __pyx_v_as_str = __pyx_k_15;
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: __pyx_v_as_str = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("to_blast_line", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("biostuff.cblastline.BlastLine.to_blast_line");
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_v_s = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_attr = Py_None; __Pyx_INCREF(Py_None);

  /* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":145
 *     """
 *     def to_blast_line(self, as_str=True):
 *         if as_str:             # <<<<<<<<<<<<<<
 *             s = [getattr(self, attr) for attr in BlastLine.attrs]
 *             s[2] = "%.2f" % (s[2], ) # pctid
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_as_str); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":146
 *     def to_blast_line(self, as_str=True):
 *         if as_str:
 *             s = [getattr(self, attr) for attr in BlastLine.attrs]             # <<<<<<<<<<<<<<
 *             s[2] = "%.2f" % (s[2], ) # pctid
 *             s[-1] = "%.1f" % (s[-1], ) # bitscore
 */
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_2));
    __pyx_t_4 = PyObject_GetAttr(((PyObject *)((PyObject*)__pyx_ptype_8biostuff_10cblastline_BlastLine)), __pyx_kp_attrs); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    if (PyList_CheckExact(__pyx_t_4) || PyTuple_CheckExact(__pyx_t_4)) {
      __pyx_t_3 = 0; __pyx_t_5 = __pyx_t_4; __Pyx_INCREF(__pyx_t_5);
    } else {
      __pyx_t_3 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    for (;;) {
      if (likely(PyList_CheckExact(__pyx_t_5))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_5)) break;
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_3); __Pyx_INCREF(__pyx_t_4); __pyx_t_3++;
      } else if (likely(PyTuple_CheckExact(__pyx_t_5))) {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_3); __Pyx_INCREF(__pyx_t_4); __pyx_t_3++;
      } else {
        __pyx_t_4 = PyIter_Next(__pyx_t_5);
        if (!__pyx_t_4) {
          if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          break;
        }
        __Pyx_GOTREF(__pyx_t_4);
      }
      __Pyx_DECREF(__pyx_v_attr);
      __pyx_v_attr = __pyx_t_4;
      __pyx_t_4 = 0;
      __pyx_t_4 = PyObject_GetAttr(__pyx_v_self, __pyx_v_attr); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = PyList_Append(__pyx_t_2, (PyObject*)__pyx_t_4); if (unlikely(__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_INCREF(((PyObject *)__pyx_t_2));
    __Pyx_DECREF(__pyx_v_s);
    __pyx_v_s = ((PyObject *)__pyx_t_2);
    __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;

    /* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":147
 *         if as_str:
 *             s = [getattr(self, attr) for attr in BlastLine.attrs]
 *             s[2] = "%.2f" % (s[2], ) # pctid             # <<<<<<<<<<<<<<
 *             s[-1] = "%.1f" % (s[-1], ) # bitscore
 *             return "\t".join(map(str, s))
 */
    __pyx_1 = __Pyx_GetItemInt(__pyx_v_s, 2, sizeof(long), PyInt_FromLong); if (!__pyx_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_1);
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_2));
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_1);
    __Pyx_GIVEREF(__pyx_1);
    __pyx_1 = 0;
    __pyx_t_5 = PyNumber_Remainder(__pyx_kp_21, ((PyObject *)__pyx_t_2)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
    if (__Pyx_SetItemInt(__pyx_v_s, 2, __pyx_t_5, sizeof(long), PyInt_FromLong) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":148
 *             s = [getattr(self, attr) for attr in BlastLine.attrs]
 *             s[2] = "%.2f" % (s[2], ) # pctid
 *             s[-1] = "%.1f" % (s[-1], ) # bitscore             # <<<<<<<<<<<<<<
 *             return "\t".join(map(str, s))
 *         else:
 */
    __pyx_1 = __Pyx_GetItemInt(__pyx_v_s, -1, sizeof(long), PyInt_FromLong); if (!__pyx_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_1);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_5));
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_1);
    __Pyx_GIVEREF(__pyx_1);
    __pyx_1 = 0;
    __pyx_t_2 = PyNumber_Remainder(__pyx_kp_22, ((PyObject *)__pyx_t_5)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
    if (__Pyx_SetItemInt(__pyx_v_s, -1, __pyx_t_2, sizeof(long), PyInt_FromLong) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":149
 *             s[2] = "%.2f" % (s[2], ) # pctid
 *             s[-1] = "%.1f" % (s[-1], ) # bitscore
 *             return "\t".join(map(str, s))             # <<<<<<<<<<<<<<
 *         else:
 *             return [getattr(self, attr) for attr in BlastLine.attrs]
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = PyObject_GetAttr(__pyx_kp_23, __pyx_kp_join); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_5));
    __Pyx_INCREF(((PyObject *)((PyObject*)&PyString_Type)));
    PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)((PyObject*)&PyString_Type)));
    __Pyx_GIVEREF(((PyObject *)((PyObject*)&PyString_Type)));
    __Pyx_INCREF(__pyx_v_s);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_s);
    __Pyx_GIVEREF(__pyx_v_s);
    __pyx_t_4 = PyObject_Call(__pyx_builtin_map, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_5));
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
    goto __pyx_L6;
  }
  /*else*/ {

    /* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":151
 *             return "\t".join(map(str, s))
 *         else:
 *             return [getattr(self, attr) for attr in BlastLine.attrs]             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_4));
    __pyx_t_5 = PyObject_GetAttr(((PyObject *)((PyObject*)__pyx_ptype_8biostuff_10cblastline_BlastLine)), __pyx_kp_attrs); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    if (PyList_CheckExact(__pyx_t_5) || PyTuple_CheckExact(__pyx_t_5)) {
      __pyx_t_3 = 0; __pyx_t_2 = __pyx_t_5; __Pyx_INCREF(__pyx_t_2);
    } else {
      __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    for (;;) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++;
      } else if (likely(PyTuple_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++;
      } else {
        __pyx_t_5 = PyIter_Next(__pyx_t_2);
        if (!__pyx_t_5) {
          if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          break;
        }
        __Pyx_GOTREF(__pyx_t_5);
      }
      __Pyx_DECREF(__pyx_v_attr);
      __pyx_v_attr = __pyx_t_5;
      __pyx_t_5 = 0;
      __pyx_t_5 = PyObject_GetAttr(__pyx_v_self, __pyx_v_attr); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PyList_Append(__pyx_t_4, (PyObject*)__pyx_t_5); if (unlikely(__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(((PyObject *)__pyx_t_4));
    __pyx_r = ((PyObject *)__pyx_t_4);
    __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
    goto __pyx_L0;
  }
  __pyx_L6:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("biostuff.cblastline.BlastLine.to_blast_line");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_s);
  __Pyx_DECREF(__pyx_v_attr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":154
 * 
 * 
 *     def __reduce__(self):             # <<<<<<<<<<<<<<
 *         return create_blast_line, (
 *             self.query, self.subject, self.pctid, self.hitlen, self.nmismatch,
 */

static PyObject *__pyx_pf_8biostuff_10cblastline_9BlastLine___reduce__(PyObject *__pyx_v_self, PyObject *unused); /*proto*/
static PyObject *__pyx_pf_8biostuff_10cblastline_9BlastLine___reduce__(PyObject *__pyx_v_self, PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_1 = 0;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  __Pyx_SetupRefcountContext("__reduce__");

  /* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":155
 * 
 *     def __reduce__(self):
 *         return create_blast_line, (             # <<<<<<<<<<<<<<
 *             self.query, self.subject, self.pctid, self.hitlen, self.nmismatch,
 *             self.ngaps, self.qstart, self.qstop, self.sstart, self.sstop,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_1 = __Pyx_GetName(__pyx_m, __pyx_kp_create_blast_line); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_1);

  /* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":156
 *     def __reduce__(self):
 *         return create_blast_line, (
 *             self.query, self.subject, self.pctid, self.hitlen, self.nmismatch,             # <<<<<<<<<<<<<<
 *             self.ngaps, self.qstart, self.qstop, self.sstart, self.sstop,
 *             self.evalue, self.score)
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_kp_query); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_kp_subject); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(((struct __pyx_obj_8biostuff_10cblastline_BlastLine *)__pyx_v_self)->pctid); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyInt_FromLong(((struct __pyx_obj_8biostuff_10cblastline_BlastLine *)__pyx_v_self)->hitlen); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyInt_FromLong(((struct __pyx_obj_8biostuff_10cblastline_BlastLine *)__pyx_v_self)->nmismatch); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);

  /* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":157
 *         return create_blast_line, (
 *             self.query, self.subject, self.pctid, self.hitlen, self.nmismatch,
 *             self.ngaps, self.qstart, self.qstop, self.sstart, self.sstop,             # <<<<<<<<<<<<<<
 *             self.evalue, self.score)
 * 
 */
  __pyx_t_6 = PyInt_FromLong(((struct __pyx_obj_8biostuff_10cblastline_BlastLine *)__pyx_v_self)->ngaps); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyInt_FromLong(((struct __pyx_obj_8biostuff_10cblastline_BlastLine *)__pyx_v_self)->qstart); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyInt_FromLong(((struct __pyx_obj_8biostuff_10cblastline_BlastLine *)__pyx_v_self)->qstop); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyInt_FromLong(((struct __pyx_obj_8biostuff_10cblastline_BlastLine *)__pyx_v_self)->sstart); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = PyInt_FromLong(((struct __pyx_obj_8biostuff_10cblastline_BlastLine *)__pyx_v_self)->sstop); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);

  /* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":158
 *             self.query, self.subject, self.pctid, self.hitlen, self.nmismatch,
 *             self.ngaps, self.qstart, self.qstop, self.sstart, self.sstop,
 *             self.evalue, self.score)             # <<<<<<<<<<<<<<
 * 
 *     #def __getstate__(self):
 */
  __pyx_t_11 = PyFloat_FromDouble(((struct __pyx_obj_8biostuff_10cblastline_BlastLine *)__pyx_v_self)->evalue); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_12 = PyFloat_FromDouble(((struct __pyx_obj_8biostuff_10cblastline_BlastLine *)__pyx_v_self)->score); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_13 = PyTuple_New(12); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_13));
  PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_13, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_13, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_13, 3, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_13, 4, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_13, 5, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_13, 6, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_13, 7, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_13, 8, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_13, 9, __pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_13, 10, __pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_11);
  PyTuple_SET_ITEM(__pyx_t_13, 11, __pyx_t_12);
  __Pyx_GIVEREF(__pyx_t_12);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_9 = 0;
  __pyx_t_10 = 0;
  __pyx_t_11 = 0;
  __pyx_t_12 = 0;
  __pyx_t_12 = PyTuple_New(2); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_12));
  PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_1);
  __Pyx_GIVEREF(__pyx_1);
  PyTuple_SET_ITEM(__pyx_t_12, 1, ((PyObject *)__pyx_t_13));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_13));
  __pyx_1 = 0;
  __pyx_t_13 = 0;
  __pyx_r = ((PyObject *)__pyx_t_12);
  __pyx_t_12 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_1);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("biostuff.cblastline.BlastLine.__reduce__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":167
 *         cdef BlastLine NEW_BLASTLINE "PY_NEW" (object t)
 * 
 * cpdef BlastLine create_blast_line(char *query, char*subject, float pctid, int hitlen,             # <<<<<<<<<<<<<<
 *                        int nmismatch, int ngaps, int qstart, int qstop,
 *                        int sstart, int sstop, float evalue, float score):
 */

static PyObject *__pyx_pf_8biostuff_10cblastline_create_blast_line(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static  struct __pyx_obj_8biostuff_10cblastline_BlastLine *__pyx_f_8biostuff_10cblastline_create_blast_line(char *__pyx_v_query, char *__pyx_v_subject, float __pyx_v_pctid, int __pyx_v_hitlen, int __pyx_v_nmismatch, int __pyx_v_ngaps, int __pyx_v_qstart, int __pyx_v_qstop, int __pyx_v_sstart, int __pyx_v_sstop, float __pyx_v_evalue, float __pyx_v_score, int __pyx_skip_dispatch) {
  struct __pyx_obj_8biostuff_10cblastline_BlastLine *__pyx_v_b = 0;
  struct __pyx_obj_8biostuff_10cblastline_BlastLine *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_SetupRefcountContext("create_blast_line");

  /* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":170
 *                        int nmismatch, int ngaps, int qstart, int qstop,
 *                        int sstart, int sstop, float evalue, float score):
 *     cdef BlastLine b = NEW_BLASTLINE(BlastLine)             # <<<<<<<<<<<<<<
 *     b.query = query
 *     b.subject = subject
 */
  __pyx_t_1 = ((PyObject *)PY_NEW(((PyObject *)((PyObject*)__pyx_ptype_8biostuff_10cblastline_BlastLine)))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_b = ((struct __pyx_obj_8biostuff_10cblastline_BlastLine *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":171
 *                        int sstart, int sstop, float evalue, float score):
 *     cdef BlastLine b = NEW_BLASTLINE(BlastLine)
 *     b.query = query             # <<<<<<<<<<<<<<
 *     b.subject = subject
 *     b.pctid = pctid
 */
  __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_query); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(((PyObject *)__pyx_v_b), __pyx_kp_query, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":172
 *     cdef BlastLine b = NEW_BLASTLINE(BlastLine)
 *     b.query = query
 *     b.subject = subject             # <<<<<<<<<<<<<<
 *     b.pctid = pctid
 *     b.hitlen = hitlen
 */
  __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_subject); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(((PyObject *)__pyx_v_b), __pyx_kp_subject, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":173
 *     b.query = query
 *     b.subject = subject
 *     b.pctid = pctid             # <<<<<<<<<<<<<<
 *     b.hitlen = hitlen
 *     b.nmismatch = nmismatch
 */
  __pyx_v_b->pctid = __pyx_v_pctid;

  /* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":174
 *     b.subject = subject
 *     b.pctid = pctid
 *     b.hitlen = hitlen             # <<<<<<<<<<<<<<
 *     b.nmismatch = nmismatch
 *     b.ngaps = ngaps
 */
  __pyx_v_b->hitlen = __pyx_v_hitlen;

  /* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":175
 *     b.pctid = pctid
 *     b.hitlen = hitlen
 *     b.nmismatch = nmismatch             # <<<<<<<<<<<<<<
 *     b.ngaps = ngaps
 *     b.qstart = qstart
 */
  __pyx_v_b->nmismatch = __pyx_v_nmismatch;

  /* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":176
 *     b.hitlen = hitlen
 *     b.nmismatch = nmismatch
 *     b.ngaps = ngaps             # <<<<<<<<<<<<<<
 *     b.qstart = qstart
 *     b.qstop = qstop
 */
  __pyx_v_b->ngaps = __pyx_v_ngaps;

  /* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":177
 *     b.nmismatch = nmismatch
 *     b.ngaps = ngaps
 *     b.qstart = qstart             # <<<<<<<<<<<<<<
 *     b.qstop = qstop
 *     b.sstart = sstart
 */
  __pyx_v_b->qstart = __pyx_v_qstart;

  /* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":178
 *     b.ngaps = ngaps
 *     b.qstart = qstart
 *     b.qstop = qstop             # <<<<<<<<<<<<<<
 *     b.sstart = sstart
 *     b.sstop = sstop
 */
  __pyx_v_b->qstop = __pyx_v_qstop;

  /* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":179
 *     b.qstart = qstart
 *     b.qstop = qstop
 *     b.sstart = sstart             # <<<<<<<<<<<<<<
 *     b.sstop = sstop
 *     b.evalue = evalue
 */
  __pyx_v_b->sstart = __pyx_v_sstart;

  /* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":180
 *     b.qstop = qstop
 *     b.sstart = sstart
 *     b.sstop = sstop             # <<<<<<<<<<<<<<
 *     b.evalue = evalue
 *     b.score = score
 */
  __pyx_v_b->sstop = __pyx_v_sstop;

  /* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":181
 *     b.sstart = sstart
 *     b.sstop = sstop
 *     b.evalue = evalue             # <<<<<<<<<<<<<<
 *     b.score = score
 *     return b
 */
  __pyx_v_b->evalue = __pyx_v_evalue;

  /* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":182
 *     b.sstop = sstop
 *     b.evalue = evalue
 *     b.score = score             # <<<<<<<<<<<<<<
 *     return b
 */
  __pyx_v_b->score = __pyx_v_score;

  /* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":183
 *     b.evalue = evalue
 *     b.score = score
 *     return b             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_b));
  __pyx_r = __pyx_v_b;
  goto __pyx_L0;

  __pyx_r = ((struct __pyx_obj_8biostuff_10cblastline_BlastLine *)Py_None); __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("biostuff.cblastline.create_blast_line");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_b);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":167
 *         cdef BlastLine NEW_BLASTLINE "PY_NEW" (object t)
 * 
 * cpdef BlastLine create_blast_line(char *query, char*subject, float pctid, int hitlen,             # <<<<<<<<<<<<<<
 *                        int nmismatch, int ngaps, int qstart, int qstop,
 *                        int sstart, int sstop, float evalue, float score):
 */

static PyObject *__pyx_pf_8biostuff_10cblastline_create_blast_line(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_8biostuff_10cblastline_create_blast_line(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_query;
  char *__pyx_v_subject;
  float __pyx_v_pctid;
  int __pyx_v_hitlen;
  int __pyx_v_nmismatch;
  int __pyx_v_ngaps;
  int __pyx_v_qstart;
  int __pyx_v_qstop;
  int __pyx_v_sstart;
  int __pyx_v_sstop;
  float __pyx_v_evalue;
  float __pyx_v_score;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_kp_query,&__pyx_kp_subject,&__pyx_kp_pctid,&__pyx_kp_hitlen,&__pyx_kp_nmismatch,&__pyx_kp_ngaps,&__pyx_kp_qstart,&__pyx_kp_qstop,&__pyx_kp_sstart,&__pyx_kp_sstop,&__pyx_kp_evalue,&__pyx_kp_score,0};
  __Pyx_SetupRefcountContext("create_blast_line");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[12] = {0,0,0,0,0,0,0,0,0,0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
      case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_kp_query);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_kp_subject);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("create_blast_line", 1, 12, 12, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_kp_pctid);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("create_blast_line", 1, 12, 12, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  3:
      values[3] = PyDict_GetItem(__pyx_kwds, __pyx_kp_hitlen);
      if (likely(values[3])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("create_blast_line", 1, 12, 12, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  4:
      values[4] = PyDict_GetItem(__pyx_kwds, __pyx_kp_nmismatch);
      if (likely(values[4])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("create_blast_line", 1, 12, 12, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  5:
      values[5] = PyDict_GetItem(__pyx_kwds, __pyx_kp_ngaps);
      if (likely(values[5])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("create_blast_line", 1, 12, 12, 5); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  6:
      values[6] = PyDict_GetItem(__pyx_kwds, __pyx_kp_qstart);
      if (likely(values[6])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("create_blast_line", 1, 12, 12, 6); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  7:
      values[7] = PyDict_GetItem(__pyx_kwds, __pyx_kp_qstop);
      if (likely(values[7])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("create_blast_line", 1, 12, 12, 7); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  8:
      values[8] = PyDict_GetItem(__pyx_kwds, __pyx_kp_sstart);
      if (likely(values[8])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("create_blast_line", 1, 12, 12, 8); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  9:
      values[9] = PyDict_GetItem(__pyx_kwds, __pyx_kp_sstop);
      if (likely(values[9])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("create_blast_line", 1, 12, 12, 9); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case 10:
      values[10] = PyDict_GetItem(__pyx_kwds, __pyx_kp_evalue);
      if (likely(values[10])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("create_blast_line", 1, 12, 12, 10); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case 11:
      values[11] = PyDict_GetItem(__pyx_kwds, __pyx_kp_score);
      if (likely(values[11])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("create_blast_line", 1, 12, 12, 11); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "create_blast_line") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_query = __Pyx_PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_query) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_subject = __Pyx_PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_subject) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_pctid = __pyx_PyFloat_AsDouble(values[2]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_hitlen = __Pyx_PyInt_AsInt(values[3]); if (unlikely((__pyx_v_hitlen == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_nmismatch = __Pyx_PyInt_AsInt(values[4]); if (unlikely((__pyx_v_nmismatch == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_ngaps = __Pyx_PyInt_AsInt(values[5]); if (unlikely((__pyx_v_ngaps == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_qstart = __Pyx_PyInt_AsInt(values[6]); if (unlikely((__pyx_v_qstart == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_qstop = __Pyx_PyInt_AsInt(values[7]); if (unlikely((__pyx_v_qstop == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_sstart = __Pyx_PyInt_AsInt(values[8]); if (unlikely((__pyx_v_sstart == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_sstop = __Pyx_PyInt_AsInt(values[9]); if (unlikely((__pyx_v_sstop == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_evalue = __pyx_PyFloat_AsDouble(values[10]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_score = __pyx_PyFloat_AsDouble(values[11]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 12) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_query = __Pyx_PyBytes_AsString(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((!__pyx_v_query) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_subject = __Pyx_PyBytes_AsString(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((!__pyx_v_subject) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_pctid = __pyx_PyFloat_AsDouble(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_hitlen = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 3)); if (unlikely((__pyx_v_hitlen == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_nmismatch = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 4)); if (unlikely((__pyx_v_nmismatch == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_ngaps = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 5)); if (unlikely((__pyx_v_ngaps == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_qstart = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 6)); if (unlikely((__pyx_v_qstart == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_qstop = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 7)); if (unlikely((__pyx_v_qstop == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_sstart = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 8)); if (unlikely((__pyx_v_sstart == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_sstop = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 9)); if (unlikely((__pyx_v_sstop == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_evalue = __pyx_PyFloat_AsDouble(PyTuple_GET_ITEM(__pyx_args, 10)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_score = __pyx_PyFloat_AsDouble(PyTuple_GET_ITEM(__pyx_args, 11)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("create_blast_line", 1, 12, 12, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("biostuff.cblastline.create_blast_line");
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_8biostuff_10cblastline_create_blast_line(__pyx_v_query, __pyx_v_subject, __pyx_v_pctid, __pyx_v_hitlen, __pyx_v_nmismatch, __pyx_v_ngaps, __pyx_v_qstart, __pyx_v_qstop, __pyx_v_sstart, __pyx_v_sstop, __pyx_v_evalue, __pyx_v_score, 0)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("biostuff.cblastline.create_blast_line");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_8biostuff_10cblastline_BlastFile(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8biostuff_10cblastline_BlastFile *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_8biostuff_10cblastline_BlastFile *)o);
  p->filename = Py_None; Py_INCREF(Py_None);
  if (__pyx_pf_8biostuff_10cblastline_9BlastFile___cinit__(o, a, k) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8biostuff_10cblastline_BlastFile(PyObject *o) {
  struct __pyx_obj_8biostuff_10cblastline_BlastFile *p = (struct __pyx_obj_8biostuff_10cblastline_BlastFile *)o;
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_8biostuff_10cblastline_9BlastFile___dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_XDECREF(p->filename);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8biostuff_10cblastline_BlastFile(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8biostuff_10cblastline_BlastFile *p = (struct __pyx_obj_8biostuff_10cblastline_BlastFile *)o;
  if (p->filename) {
    e = (*v)(p->filename, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8biostuff_10cblastline_BlastFile(PyObject *o) {
  struct __pyx_obj_8biostuff_10cblastline_BlastFile *p = (struct __pyx_obj_8biostuff_10cblastline_BlastFile *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->filename);
  p->filename = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static struct PyMethodDef __pyx_methods_8biostuff_10cblastline_BlastFile[] = {
  {__Pyx_NAMESTR("__iter__"), (PyCFunction)__pyx_pf_8biostuff_10cblastline_9BlastFile___iter__, METH_NOARGS|METH_COEXIST, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("__next__"), (PyCFunction)__pyx_pf_8biostuff_10cblastline_9BlastFile___next__, METH_NOARGS|METH_COEXIST, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("__repr__"), (PyCFunction)__pyx_pf_8biostuff_10cblastline_9BlastFile___repr__, METH_NOARGS|METH_COEXIST, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_BlastFile = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION >= 3
  0, /*reserved*/
  #else
  0, /*nb_long*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if (PY_MAJOR_VERSION >= 3) || (Py_TPFLAGS_DEFAULT & Py_TPFLAGS_HAVE_INDEX)
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_BlastFile = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_BlastFile = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_BlastFile = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

PyTypeObject __pyx_type_8biostuff_10cblastline_BlastFile = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("biostuff.cblastline.BlastFile"), /*tp_name*/
  sizeof(struct __pyx_obj_8biostuff_10cblastline_BlastFile), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8biostuff_10cblastline_BlastFile, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_compare*/
  __pyx_pf_8biostuff_10cblastline_9BlastFile___repr__, /*tp_repr*/
  &__pyx_tp_as_number_BlastFile, /*tp_as_number*/
  &__pyx_tp_as_sequence_BlastFile, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_BlastFile, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_BlastFile, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_8biostuff_10cblastline_BlastFile, /*tp_traverse*/
  __pyx_tp_clear_8biostuff_10cblastline_BlastFile, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pf_8biostuff_10cblastline_9BlastFile___iter__, /*tp_iter*/
  __pyx_pf_8biostuff_10cblastline_9BlastFile___next__, /*tp_iternext*/
  __pyx_methods_8biostuff_10cblastline_BlastFile, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8biostuff_10cblastline_BlastFile, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
};

static PyObject *__pyx_tp_new_8biostuff_10cblastline_BlastLine(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8biostuff_10cblastline_BlastLine *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_8biostuff_10cblastline_BlastLine *)o);
  p->_pysubject = Py_None; Py_INCREF(Py_None);
  p->_pyquery = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_8biostuff_10cblastline_BlastLine(PyObject *o) {
  struct __pyx_obj_8biostuff_10cblastline_BlastLine *p = (struct __pyx_obj_8biostuff_10cblastline_BlastLine *)o;
  Py_XDECREF(p->_pysubject);
  Py_XDECREF(p->_pyquery);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8biostuff_10cblastline_BlastLine(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8biostuff_10cblastline_BlastLine *p = (struct __pyx_obj_8biostuff_10cblastline_BlastLine *)o;
  if (p->_pysubject) {
    e = (*v)(p->_pysubject, a); if (e) return e;
  }
  if (p->_pyquery) {
    e = (*v)(p->_pyquery, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8biostuff_10cblastline_BlastLine(PyObject *o) {
  struct __pyx_obj_8biostuff_10cblastline_BlastLine *p = (struct __pyx_obj_8biostuff_10cblastline_BlastLine *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->_pysubject);
  p->_pysubject = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_pyquery);
  p->_pyquery = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_8biostuff_10cblastline_9BlastLine_query(PyObject *o, void *x) {
  return __pyx_pf_8biostuff_10cblastline_9BlastLine_5query___get__(o);
}

static int __pyx_setprop_8biostuff_10cblastline_9BlastLine_query(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_8biostuff_10cblastline_9BlastLine_5query___set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_8biostuff_10cblastline_9BlastLine_subject(PyObject *o, void *x) {
  return __pyx_pf_8biostuff_10cblastline_9BlastLine_7subject___get__(o);
}

static int __pyx_setprop_8biostuff_10cblastline_9BlastLine_subject(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_8biostuff_10cblastline_9BlastLine_7subject___set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static struct PyMethodDef __pyx_methods_8biostuff_10cblastline_BlastLine[] = {
  {__Pyx_NAMESTR("__repr__"), (PyCFunction)__pyx_pf_8biostuff_10cblastline_9BlastLine___repr__, METH_NOARGS|METH_COEXIST, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("to_blast_line"), (PyCFunction)__pyx_pf_8biostuff_10cblastline_9BlastLine_to_blast_line, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("__reduce__"), (PyCFunction)__pyx_pf_8biostuff_10cblastline_9BlastLine___reduce__, METH_NOARGS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static struct PyMemberDef __pyx_members_8biostuff_10cblastline_BlastLine[] = {
  {(char *)"hitlen", T_INT, offsetof(struct __pyx_obj_8biostuff_10cblastline_BlastLine, hitlen), 0, 0},
  {(char *)"nmismatch", T_INT, offsetof(struct __pyx_obj_8biostuff_10cblastline_BlastLine, nmismatch), 0, 0},
  {(char *)"ngaps", T_INT, offsetof(struct __pyx_obj_8biostuff_10cblastline_BlastLine, ngaps), 0, 0},
  {(char *)"qstart", T_INT, offsetof(struct __pyx_obj_8biostuff_10cblastline_BlastLine, qstart), 0, 0},
  {(char *)"qstop", T_INT, offsetof(struct __pyx_obj_8biostuff_10cblastline_BlastLine, qstop), 0, 0},
  {(char *)"sstart", T_INT, offsetof(struct __pyx_obj_8biostuff_10cblastline_BlastLine, sstart), 0, 0},
  {(char *)"sstop", T_INT, offsetof(struct __pyx_obj_8biostuff_10cblastline_BlastLine, sstop), 0, 0},
  {(char *)"pctid", T_FLOAT, offsetof(struct __pyx_obj_8biostuff_10cblastline_BlastLine, pctid), 0, 0},
  {(char *)"score", T_FLOAT, offsetof(struct __pyx_obj_8biostuff_10cblastline_BlastLine, score), 0, 0},
  {(char *)"evalue", T_DOUBLE, offsetof(struct __pyx_obj_8biostuff_10cblastline_BlastLine, evalue), 0, 0},
  {0, 0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8biostuff_10cblastline_BlastLine[] = {
  {(char *)"query", __pyx_getprop_8biostuff_10cblastline_9BlastLine_query, __pyx_setprop_8biostuff_10cblastline_9BlastLine_query, 0, 0},
  {(char *)"subject", __pyx_getprop_8biostuff_10cblastline_9BlastLine_subject, __pyx_setprop_8biostuff_10cblastline_9BlastLine_subject, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_BlastLine = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION >= 3
  0, /*reserved*/
  #else
  0, /*nb_long*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if (PY_MAJOR_VERSION >= 3) || (Py_TPFLAGS_DEFAULT & Py_TPFLAGS_HAVE_INDEX)
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_BlastLine = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_BlastLine = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_BlastLine = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

PyTypeObject __pyx_type_8biostuff_10cblastline_BlastLine = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("biostuff.cblastline.BlastLine"), /*tp_name*/
  sizeof(struct __pyx_obj_8biostuff_10cblastline_BlastLine), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8biostuff_10cblastline_BlastLine, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_compare*/
  __pyx_pf_8biostuff_10cblastline_9BlastLine___repr__, /*tp_repr*/
  &__pyx_tp_as_number_BlastLine, /*tp_as_number*/
  &__pyx_tp_as_sequence_BlastLine, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_BlastLine, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_BlastLine, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("\n    given a string of tab-delimited (-m 8) blast output, parse it and create\n    an object with the usual attrs:\n\n    >>> from biostuff import BlastLine \n    >>> b = BlastLine(\"Os09g11510\tOs08g13650\t92.31\t39\t3\t0\t2273\t2311\t3237\t3199\t0.001\t54.0\")\n    >>> b.query\n    'Os09g11510'\n\n    >>> attrs = ('query', 'subject', 'pctid', 'hitlen', 'nmismatch', 'ngaps', \\\n    ...  'qstart', 'qstop', 'sstart', 'sstop', 'evalue', 'score')\n    >>> [getattr(b, attr) for attr in attrs]# doctest: +ELLIPSIS\n    ['Os09g11510', 'Os08g13650', 92.3..., 39, 3, 0, 2273, 2311, 3237, 3199, 0.001..., 54.0]\n        \n    "), /*tp_doc*/
  __pyx_tp_traverse_8biostuff_10cblastline_BlastLine, /*tp_traverse*/
  __pyx_tp_clear_8biostuff_10cblastline_BlastLine, /*tp_clear*/
  __pyx_pf_8biostuff_10cblastline_9BlastLine___richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8biostuff_10cblastline_BlastLine, /*tp_methods*/
  __pyx_members_8biostuff_10cblastline_BlastLine, /*tp_members*/
  __pyx_getsets_8biostuff_10cblastline_BlastLine, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_8biostuff_10cblastline_9BlastLine___init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8biostuff_10cblastline_BlastLine, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
};

static struct PyMethodDef __pyx_methods[] = {
  {__Pyx_NAMESTR("create_blast_line"), (PyCFunction)__pyx_pf_8biostuff_10cblastline_create_blast_line, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static void __pyx_init_filenames(void); /*proto*/

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    __Pyx_NAMESTR("cblastline"),
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp___main__, __pyx_k___main__, sizeof(__pyx_k___main__), 1, 1, 1},
  {&__pyx_kp___cinit__, __pyx_k___cinit__, sizeof(__pyx_k___cinit__), 1, 1, 1},
  {&__pyx_kp___iter__, __pyx_k___iter__, sizeof(__pyx_k___iter__), 1, 1, 1},
  {&__pyx_kp___next__, __pyx_k___next__, sizeof(__pyx_k___next__), 1, 1, 1},
  {&__pyx_kp___dealloc__, __pyx_k___dealloc__, sizeof(__pyx_k___dealloc__), 1, 1, 1},
  {&__pyx_kp___repr__, __pyx_k___repr__, sizeof(__pyx_k___repr__), 1, 1, 1},
  {&__pyx_kp_attrs, __pyx_k_attrs, sizeof(__pyx_k_attrs), 1, 1, 1},
  {&__pyx_kp___init__, __pyx_k___init__, sizeof(__pyx_k___init__), 1, 1, 1},
  {&__pyx_kp___richcmp__, __pyx_k___richcmp__, sizeof(__pyx_k___richcmp__), 1, 1, 1},
  {&__pyx_kp_to_blast_line, __pyx_k_to_blast_line, sizeof(__pyx_k_to_blast_line), 1, 1, 1},
  {&__pyx_kp___reduce__, __pyx_k___reduce__, sizeof(__pyx_k___reduce__), 1, 1, 1},
  {&__pyx_kp_create_blast_line, __pyx_k_create_blast_line, sizeof(__pyx_k_create_blast_line), 1, 1, 1},
  {&__pyx_kp_filename, __pyx_k_filename, sizeof(__pyx_k_filename), 1, 1, 1},
  {&__pyx_kp_val, __pyx_k_val, sizeof(__pyx_k_val), 1, 1, 1},
  {&__pyx_kp_sline, __pyx_k_sline, sizeof(__pyx_k_sline), 1, 1, 1},
  {&__pyx_kp_self, __pyx_k_self, sizeof(__pyx_k_self), 1, 1, 1},
  {&__pyx_kp_other, __pyx_k_other, sizeof(__pyx_k_other), 1, 1, 1},
  {&__pyx_kp_op, __pyx_k_op, sizeof(__pyx_k_op), 1, 1, 1},
  {&__pyx_kp_as_str, __pyx_k_as_str, sizeof(__pyx_k_as_str), 1, 1, 1},
  {&__pyx_kp_query, __pyx_k_query, sizeof(__pyx_k_query), 1, 1, 1},
  {&__pyx_kp_subject, __pyx_k_subject, sizeof(__pyx_k_subject), 1, 1, 1},
  {&__pyx_kp_pctid, __pyx_k_pctid, sizeof(__pyx_k_pctid), 1, 1, 1},
  {&__pyx_kp_hitlen, __pyx_k_hitlen, sizeof(__pyx_k_hitlen), 1, 1, 1},
  {&__pyx_kp_nmismatch, __pyx_k_nmismatch, sizeof(__pyx_k_nmismatch), 1, 1, 1},
  {&__pyx_kp_ngaps, __pyx_k_ngaps, sizeof(__pyx_k_ngaps), 1, 1, 1},
  {&__pyx_kp_qstart, __pyx_k_qstart, sizeof(__pyx_k_qstart), 1, 1, 1},
  {&__pyx_kp_qstop, __pyx_k_qstop, sizeof(__pyx_k_qstop), 1, 1, 1},
  {&__pyx_kp_sstart, __pyx_k_sstart, sizeof(__pyx_k_sstart), 1, 1, 1},
  {&__pyx_kp_sstop, __pyx_k_sstop, sizeof(__pyx_k_sstop), 1, 1, 1},
  {&__pyx_kp_evalue, __pyx_k_evalue, sizeof(__pyx_k_evalue), 1, 1, 1},
  {&__pyx_kp_score, __pyx_k_score, sizeof(__pyx_k_score), 1, 1, 1},
  {&__pyx_kp_sys, __pyx_k_sys, sizeof(__pyx_k_sys), 1, 1, 1},
  {&__pyx_kp_3, __pyx_k_3, sizeof(__pyx_k_3), 0, 1, 0},
  {&__pyx_kp_4, __pyx_k_4, sizeof(__pyx_k_4), 0, 1, 0},
  {&__pyx_kp_5, __pyx_k_5, sizeof(__pyx_k_5), 0, 1, 0},
  {&__pyx_kp_6, __pyx_k_6, sizeof(__pyx_k_6), 0, 1, 0},
  {&__pyx_kp_7, __pyx_k_7, sizeof(__pyx_k_7), 0, 1, 0},
  {&__pyx_kp_8, __pyx_k_8, sizeof(__pyx_k_8), 0, 1, 0},
  {&__pyx_kp_9, __pyx_k_9, sizeof(__pyx_k_9), 0, 1, 0},
  {&__pyx_kp_10, __pyx_k_10, sizeof(__pyx_k_10), 0, 1, 0},
  {&__pyx_kp_11, __pyx_k_11, sizeof(__pyx_k_11), 0, 1, 0},
  {&__pyx_kp_12, __pyx_k_12, sizeof(__pyx_k_12), 0, 1, 0},
  {&__pyx_kp_13, __pyx_k_13, sizeof(__pyx_k_13), 0, 1, 0},
  {&__pyx_kp_14, __pyx_k_14, sizeof(__pyx_k_14), 0, 1, 0},
  {&__pyx_kp_StopIteration, __pyx_k_StopIteration, sizeof(__pyx_k_StopIteration), 1, 1, 1},
  {&__pyx_kp_Exception, __pyx_k_Exception, sizeof(__pyx_k_Exception), 1, 1, 1},
  {&__pyx_kp_join, __pyx_k_join, sizeof(__pyx_k_join), 1, 1, 1},
  {&__pyx_kp_map, __pyx_k_map, sizeof(__pyx_k_map), 1, 1, 1},
  {&__pyx_kp_17, __pyx_k_17, sizeof(__pyx_k_17), 0, 0, 0},
  {&__pyx_kp_18, __pyx_k_18, sizeof(__pyx_k_18), 0, 0, 0},
  {&__pyx_kp_19, __pyx_k_19, sizeof(__pyx_k_19), 0, 0, 0},
  {&__pyx_kp_20, __pyx_k_20, sizeof(__pyx_k_20), 0, 0, 0},
  {&__pyx_kp_21, __pyx_k_21, sizeof(__pyx_k_21), 0, 0, 0},
  {&__pyx_kp_22, __pyx_k_22, sizeof(__pyx_k_22), 0, 0, 0},
  {&__pyx_kp_23, __pyx_k_23, sizeof(__pyx_k_23), 0, 0, 0},
  {0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_StopIteration = __Pyx_GetName(__pyx_b, __pyx_kp_StopIteration); if (!__pyx_builtin_StopIteration) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_Exception = __Pyx_GetName(__pyx_b, __pyx_kp_Exception); if (!__pyx_builtin_Exception) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_map = __Pyx_GetName(__pyx_b, __pyx_kp_map); if (!__pyx_builtin_map) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitGlobals(void) {
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initcblastline(void); /*proto*/
PyMODINIT_FUNC initcblastline(void)
#else
PyMODINIT_FUNC PyInit_cblastline(void); /*proto*/
PyMODINIT_FUNC PyInit_cblastline(void)
#endif
{
  PyObject *__pyx_1 = 0;
  PyObject *__pyx_t_1 = NULL;
  #ifdef CYTHON_REFNANNY
  void* __pyx_refchk = NULL;
  __Pyx_Refnanny = __Pyx_ImportRefcountAPI("refnanny");
  if (!__Pyx_Refnanny) {
      PyErr_Clear();
      __Pyx_Refnanny = __Pyx_ImportRefcountAPI("Cython.Runtime.refnanny");
      if (!__Pyx_Refnanny)
          Py_FatalError("failed to import refnanny module");
  }
  __pyx_refchk = __Pyx_Refnanny->NewContext("PyMODINIT_FUNC PyInit_cblastline(void)", __LINE__, __FILE__);
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Library function declarations ---*/
  __pyx_init_filenames();
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("cblastline"), __pyx_methods, 0, 0, PYTHON_API_VERSION);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (!__pyx_m) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  #if PY_MAJOR_VERSION < 3
  Py_INCREF(__pyx_m);
  #endif
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME));
  if (!__pyx_b) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  if (__pyx_module_is_main_biostuff__cblastline) {
    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_kp___main__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_skip_dispatch = 0;
  /*--- Global init code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_8biostuff_10cblastline_BlastFile) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "BlastFile", (PyObject *)&__pyx_type_8biostuff_10cblastline_BlastFile) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8biostuff_10cblastline_BlastFile = &__pyx_type_8biostuff_10cblastline_BlastFile;
  if (PyType_Ready(&__pyx_type_8biostuff_10cblastline_BlastLine) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "BlastLine", (PyObject *)&__pyx_type_8biostuff_10cblastline_BlastLine) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8biostuff_10cblastline_BlastLine = &__pyx_type_8biostuff_10cblastline_BlastLine;
  /*--- Type import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":10
 * 
 * 
 * cdef const_char_star blast_format = "%s\t%s\t%f\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%lf\t%f"             # <<<<<<<<<<<<<<
 * cdef const_char_star blast_format_line = "%s\t%s\t%f\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%lf\t%f\n"
 * 
 */
  __pyx_v_8biostuff_10cblastline_blast_format = __pyx_k_1;

  /* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":11
 * 
 * cdef const_char_star blast_format = "%s\t%s\t%f\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%lf\t%f"
 * cdef const_char_star blast_format_line = "%s\t%s\t%f\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%lf\t%f\n"             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "stdio.h":
 */
  __pyx_v_8biostuff_10cblastline_blast_format_line = __pyx_k_2;

  /* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":59
 *         return "BlastFile('%s')" % (self.filename, )
 * 
 * import sys             # <<<<<<<<<<<<<<
 * 
 * cdef class BlastLine:
 */
  __pyx_1 = __Pyx_Import(__pyx_kp_sys, 0); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_kp_sys, __pyx_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_1); __pyx_1 = 0;

  /* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":83
 *     cdef object _pysubject, _pyquery
 *     attrs = ('query', 'subject', 'pctid', 'hitlen', 'nmismatch', 'ngaps', \
 *                  'qstart', 'qstop', 'sstart', 'sstop', 'evalue', 'score')             # <<<<<<<<<<<<<<
 * 
 *     property query:
 */
  __pyx_t_1 = PyTuple_New(12); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(__pyx_kp_3);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_3);
  __Pyx_GIVEREF(__pyx_kp_3);
  __Pyx_INCREF(__pyx_kp_4);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_kp_4);
  __Pyx_GIVEREF(__pyx_kp_4);
  __Pyx_INCREF(__pyx_kp_5);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_5);
  __Pyx_GIVEREF(__pyx_kp_5);
  __Pyx_INCREF(__pyx_kp_6);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_kp_6);
  __Pyx_GIVEREF(__pyx_kp_6);
  __Pyx_INCREF(__pyx_kp_7);
  PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_7);
  __Pyx_GIVEREF(__pyx_kp_7);
  __Pyx_INCREF(__pyx_kp_8);
  PyTuple_SET_ITEM(__pyx_t_1, 5, __pyx_kp_8);
  __Pyx_GIVEREF(__pyx_kp_8);
  __Pyx_INCREF(__pyx_kp_9);
  PyTuple_SET_ITEM(__pyx_t_1, 6, __pyx_kp_9);
  __Pyx_GIVEREF(__pyx_kp_9);
  __Pyx_INCREF(__pyx_kp_10);
  PyTuple_SET_ITEM(__pyx_t_1, 7, __pyx_kp_10);
  __Pyx_GIVEREF(__pyx_kp_10);
  __Pyx_INCREF(__pyx_kp_11);
  PyTuple_SET_ITEM(__pyx_t_1, 8, __pyx_kp_11);
  __Pyx_GIVEREF(__pyx_kp_11);
  __Pyx_INCREF(__pyx_kp_12);
  PyTuple_SET_ITEM(__pyx_t_1, 9, __pyx_kp_12);
  __Pyx_GIVEREF(__pyx_kp_12);
  __Pyx_INCREF(__pyx_kp_13);
  PyTuple_SET_ITEM(__pyx_t_1, 10, __pyx_kp_13);
  __Pyx_GIVEREF(__pyx_kp_13);
  __Pyx_INCREF(__pyx_kp_14);
  PyTuple_SET_ITEM(__pyx_t_1, 11, __pyx_kp_14);
  __Pyx_GIVEREF(__pyx_kp_14);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8biostuff_10cblastline_BlastLine->tp_dict, __pyx_kp_attrs, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8biostuff_10cblastline_BlastLine);

  /* "/usr/local/src/bpbio/biostuff/biostuff/cblastline.pyx":144
 *                                     qstart, qstop, sstart, sstop, evalue, bit)
 *     """
 *     def to_blast_line(self, as_str=True):             # <<<<<<<<<<<<<<
 *         if as_str:
 *             s = [getattr(self, attr) for attr in BlastLine.attrs]
 */
  __pyx_t_1 = __Pyx_PyBool_FromLong(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k_15 = __pyx_t_1;
  __pyx_t_1 = 0;
  __Pyx_GIVEREF(__pyx_k_15);

  /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/stdlib.pxd":2
 * 
 * cdef extern from "stdlib.h" nogil:             # <<<<<<<<<<<<<<
 *     void free(void *ptr)
 *     void *malloc(size_t size)
 */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_1);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("biostuff.cblastline");
  Py_DECREF(__pyx_m); __pyx_m = 0;
  __pyx_L0:;
  __Pyx_FinishRefcountContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

static const char *__pyx_filenames[] = {
  "cblastline.pyx",
};

/* Runtime support code */

static void __pyx_init_filenames(void) {
  __pyx_f = __pyx_filenames;
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AS_STRING(kw_name));
        #endif
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *number, *more_or_less;

    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    number = (num_expected == 1) ? "" : "s";
    PyErr_Format(PyExc_TypeError,
        #if PY_VERSION_HEX < 0x02050000
            "%s() takes %s %d positional argument%s (%d given)",
        #else
            "%s() takes %s %zd positional argument%s (%zd given)",
        #endif
        func_name, more_or_less, num_expected, number, num_found);
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;

    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
        } else {
            #if PY_MAJOR_VERSION < 3
            if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key))) {
            #else
            if (unlikely(!PyUnicode_CheckExact(key)) && unlikely(!PyUnicode_Check(key))) {
            #endif
                goto invalid_keyword_type;
            } else {
                for (name = first_kw_arg; *name; name++) {
                    #if PY_MAJOR_VERSION >= 3
                    if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                        PyUnicode_Compare(**name, key) == 0) break;
                    #else
                    if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                        _PyString_Eq(**name, key)) break;
                    #endif
                }
                if (*name) {
                    values[name-argnames] = value;
                } else {
                    /* unexpected keyword found */
                    for (name=argnames; name != first_kw_arg; name++) {
                        if (**name == key) goto arg_passed_twice;
                        #if PY_MAJOR_VERSION >= 3
                        if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                            PyUnicode_Compare(**name, key) == 0) goto arg_passed_twice;
                        #else
                        if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                            _PyString_Eq(**name, key)) goto arg_passed_twice;
                        #endif
                    }
                    if (kwds2) {
                        if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
                    } else {
                        goto invalid_keyword;
                    }
                }
            }
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, **name);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}



static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (!type) {
        PyErr_Format(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (Py_TYPE(obj) == type) return 1;
    }
    else {
        if (PyObject_TypeCheck(obj, type)) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%s' has incorrect type (expected %s, got %s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list) {
    PyObject *__import__ = 0;
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    __import__ = __Pyx_GetAttrString(__pyx_b, "__import__");
    if (!__import__)
        goto bad;
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    module = PyObject_CallFunctionObjArgs(__import__,
        name, global_dict, empty_dict, list, NULL);
bad:
    Py_XDECREF(empty_list);
    Py_XDECREF(__import__);
    Py_XDECREF(empty_dict);
    return module;
}

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name) {
    PyObject *result;
    result = PyObject_GetAttr(dict, name);
    if (!result)
        PyErr_SetObject(PyExc_NameError, name);
    return result;
}

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb) {
    Py_XINCREF(type);
    Py_XINCREF(value);
    Py_XINCREF(tb);
    /* First, check the traceback argument, replacing None with NULL. */
    if (tb == Py_None) {
        Py_DECREF(tb);
        tb = 0;
    }
    else if (tb != NULL && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto raise_error;
    }
    /* Next, replace a missing value with None */
    if (value == NULL) {
        value = Py_None;
        Py_INCREF(value);
    }
    #if PY_VERSION_HEX < 0x02050000
    if (!PyClass_Check(type))
    #else
    if (!PyType_Check(type))
    #endif
    {
        /* Raising an instance.  The value should be a dummy. */
        if (value != Py_None) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        /* Normalize to raise <class>, <instance> */
        Py_DECREF(value);
        value = type;
        #if PY_VERSION_HEX < 0x02050000
            if (PyInstance_Check(type)) {
                type = (PyObject*) ((PyInstanceObject*)type)->in_class;
                Py_INCREF(type);
            }
            else {
                type = 0;
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception must be an old-style class or instance");
                goto raise_error;
            }
        #else
            type = (PyObject*) Py_TYPE(type);
            Py_INCREF(type);
            if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception class must be a subclass of BaseException");
                goto raise_error;
            }
        #endif
    }
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}

static INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();

#if PY_MAJOR_VERSION >= 3
    /* Note: this is a temporary work-around to prevent crashes in Python 3.0 */
    if ((tstate->exc_type != NULL) & (tstate->exc_type != Py_None)) {
        tmp_type = tstate->exc_type;
        tmp_value = tstate->exc_value;
        tmp_tb = tstate->exc_traceback;
        PyErr_NormalizeException(&type, &value, &tb);
        PyErr_NormalizeException(&tmp_type, &tmp_value, &tmp_tb);
        tstate->exc_type = 0;
        tstate->exc_value = 0;
        tstate->exc_traceback = 0;
        PyException_SetContext(value, tmp_value);
        Py_DECREF(tmp_type);
        Py_XDECREF(tmp_tb);
    }
#endif

    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}

static INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;

    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}


static INLINE int __Pyx_StrEq(const char *s1, const char *s2) {
     while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
     return *s1 == *s2;
}

static INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject* x) {
    if (sizeof(unsigned char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned char)val)) {
            if (unlikely(val == -1 && PyErr_Occurred()))
                return (unsigned char)-1;
            if (unlikely(val < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned char");
                return (unsigned char)-1;
            }
            PyErr_SetString(PyExc_OverflowError,
                           "value too large to convert to unsigned char");
            return (unsigned char)-1;
        }
        return (unsigned char)val;
    }
    return (unsigned char)__Pyx_PyInt_AsUnsignedLong(x);
}

static INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject* x) {
    if (sizeof(unsigned short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned short)val)) {
            if (unlikely(val == -1 && PyErr_Occurred()))
                return (unsigned short)-1;
            if (unlikely(val < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned short");
                return (unsigned short)-1;
            }
            PyErr_SetString(PyExc_OverflowError,
                           "value too large to convert to unsigned short");
            return (unsigned short)-1;
        }
        return (unsigned short)val;
    }
    return (unsigned short)__Pyx_PyInt_AsUnsignedLong(x);
}

static INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject* x) {
    if (sizeof(unsigned int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned int)val)) {
            if (unlikely(val == -1 && PyErr_Occurred()))
                return (unsigned int)-1;
            if (unlikely(val < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned int");
                return (unsigned int)-1;
            }
            PyErr_SetString(PyExc_OverflowError,
                           "value too large to convert to unsigned int");
            return (unsigned int)-1;
        }
        return (unsigned int)val;
    }
    return (unsigned int)__Pyx_PyInt_AsUnsignedLong(x);
}

static INLINE char __Pyx_PyInt_AsChar(PyObject* x) {
    if (sizeof(char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(char)val)) {
            if (unlikely(val == -1 && PyErr_Occurred()))
                return (char)-1;
            PyErr_SetString(PyExc_OverflowError,
                           "value too large to convert to char");
            return (char)-1;
        }
        return (char)val;
    }
    return (char)__Pyx_PyInt_AsLong(x);
}

static INLINE short __Pyx_PyInt_AsShort(PyObject* x) {
    if (sizeof(short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(short)val)) {
            if (unlikely(val == -1 && PyErr_Occurred()))
                return (short)-1;
            PyErr_SetString(PyExc_OverflowError,
                           "value too large to convert to short");
            return (short)-1;
        }
        return (short)val;
    }
    return (short)__Pyx_PyInt_AsLong(x);
}

static INLINE int __Pyx_PyInt_AsInt(PyObject* x) {
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (unlikely(val == -1 && PyErr_Occurred()))
                return (int)-1;
            PyErr_SetString(PyExc_OverflowError,
                           "value too large to convert to int");
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject* x) {
    if (sizeof(signed char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed char)val)) {
            if (unlikely(val == -1 && PyErr_Occurred()))
                return (signed char)-1;
            PyErr_SetString(PyExc_OverflowError,
                           "value too large to convert to signed char");
            return (signed char)-1;
        }
        return (signed char)val;
    }
    return (signed char)__Pyx_PyInt_AsSignedLong(x);
}

static INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject* x) {
    if (sizeof(signed short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed short)val)) {
            if (unlikely(val == -1 && PyErr_Occurred()))
                return (signed short)-1;
            PyErr_SetString(PyExc_OverflowError,
                           "value too large to convert to signed short");
            return (signed short)-1;
        }
        return (signed short)val;
    }
    return (signed short)__Pyx_PyInt_AsSignedLong(x);
}

static INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject* x) {
    if (sizeof(signed int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed int)val)) {
            if (unlikely(val == -1 && PyErr_Occurred()))
                return (signed int)-1;
            PyErr_SetString(PyExc_OverflowError,
                           "value too large to convert to signed int");
            return (signed int)-1;
        }
        return (signed int)val;
    }
    return (signed int)__Pyx_PyInt_AsSignedLong(x);
}

static INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject* x) {
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_CheckExact(x) || PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned long");
            return (unsigned long)-1;
        }
        return (unsigned long)val;
    } else
#endif
    if (likely(PyLong_CheckExact(x) || PyLong_Check(x))) {
        if (unlikely(Py_SIZE(x) < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned long");
            return (unsigned long)-1;
        }
        return PyLong_AsUnsignedLong(x);
    } else {
        unsigned long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned long)-1;
        val = __Pyx_PyInt_AsUnsignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject* x) {
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_CheckExact(x) || PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned PY_LONG_LONG");
            return (unsigned PY_LONG_LONG)-1;
        }
        return (unsigned PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_CheckExact(x) || PyLong_Check(x))) {
        if (unlikely(Py_SIZE(x) < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned PY_LONG_LONG");
            return (unsigned PY_LONG_LONG)-1;
        }
        return PyLong_AsUnsignedLongLong(x);
    } else {
        unsigned PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsUnsignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static INLINE long __Pyx_PyInt_AsLong(PyObject* x) {
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_CheckExact(x) || PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        return (long)val;
    } else
#endif
    if (likely(PyLong_CheckExact(x) || PyLong_Check(x))) {
        return PyLong_AsLong(x);
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long)-1;
        val = __Pyx_PyInt_AsLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject* x) {
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_CheckExact(x) || PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        return (PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_CheckExact(x) || PyLong_Check(x))) {
        return PyLong_AsLongLong(x);
    } else {
        PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject* x) {
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_CheckExact(x) || PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        return (signed long)val;
    } else
#endif
    if (likely(PyLong_CheckExact(x) || PyLong_Check(x))) {
        return PyLong_AsLong(x);
    } else {
        signed long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed long)-1;
        val = __Pyx_PyInt_AsSignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject* x) {
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_CheckExact(x) || PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        return (signed PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_CheckExact(x) || PyLong_Check(x))) {
        return PyLong_AsLongLong(x);
    } else {
        signed PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsSignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"

static void __Pyx_AddTraceback(const char *funcname) {
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    PyObject *py_globals = 0;
    PyObject *empty_string = 0;
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;

    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(__pyx_filename);
    #else
    py_srcfile = PyUnicode_FromString(__pyx_filename);
    #endif
    if (!py_srcfile) goto bad;
    if (__pyx_clineno) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    #if PY_MAJOR_VERSION < 3
    empty_string = PyString_FromStringAndSize("", 0);
    #else
    empty_string = PyBytes_FromStringAndSize("", 0);
    #endif
    if (!empty_string) goto bad;
    py_code = PyCode_New(
        0,            /*int argcount,*/
        #if PY_MAJOR_VERSION >= 3
        0,            /*int kwonlyargcount,*/
        #endif
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        empty_string, /*PyObject *code,*/
        __pyx_empty_tuple,  /*PyObject *consts,*/
        __pyx_empty_tuple,  /*PyObject *names,*/
        __pyx_empty_tuple,  /*PyObject *varnames,*/
        __pyx_empty_tuple,  /*PyObject *freevars,*/
        __pyx_empty_tuple,  /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        __pyx_lineno,   /*int firstlineno,*/
        empty_string  /*PyObject *lnotab*/
    );
    if (!py_code) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = __pyx_lineno;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    Py_XDECREF(empty_string);
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode && (!t->is_identifier)) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_identifier || (t->is_unicode && t->intern)) {
            *t->p = PyUnicode_InternFromString(t->s);
        } else if (t->is_unicode) {
            *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

/* Type Conversion Functions */

static INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   if (x == Py_True) return 1;
   else if ((x == Py_False) | (x == Py_None)) return 0;
   else return PyObject_IsTrue(x);
}

static INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_VERSION_HEX < 0x03000000
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_VERSION_HEX < 0x03000000
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%s__ returned non-%s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}

static INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject* x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}

static INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
#if PY_VERSION_HEX < 0x02050000
   if (ival <= LONG_MAX)
       return PyInt_FromLong((long)ival);
   else {
       unsigned char *bytes = (unsigned char *) &ival;
       int one = 1; int little = (int)*(unsigned char*)&one;
       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
   }
#else
   return PyInt_FromSize_t(ival);
#endif
}

static INLINE size_t __Pyx_PyInt_AsSize_t(PyObject* x) {
   unsigned PY_LONG_LONG val = __Pyx_PyInt_AsUnsignedLongLong(x);
   if (unlikely(val == (unsigned PY_LONG_LONG)-1 && PyErr_Occurred())) {
       return (size_t)-1;
   } else if (unlikely(val != (unsigned PY_LONG_LONG)(size_t)val)) {
       PyErr_SetString(PyExc_OverflowError,
                       "value too large to convert to size_t");
       return (size_t)-1;
   }
   return (size_t)val;
}


